// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_query_completion_response

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func QueryCompletionResponseDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"completion_limit": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "limit on the number of auto-completion results returned by the request",
				MarkdownDescription: "limit on the number of auto-completion results returned by the request",
			},
			"completions": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"completion": schema.StringAttribute{
							Computed: true,
						},
						"token": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: CompletionsType{
						ObjectType: types.ObjectType{
							AttrTypes: CompletionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Array of possible auto-completion results.",
				MarkdownDescription: "Array of possible auto-completion results.",
			},
			"query": schema.StringAttribute{
				Required:            true,
				Description:         "the EDA query language request string",
				MarkdownDescription: "the EDA query language request string",
			},
		},
	}
}

type QueryCompletionResponseModel struct {
	CompletionLimit types.Int64  `tfsdk:"completion_limit"`
	Completions     types.List   `tfsdk:"completions"`
	Query           types.String `tfsdk:"query"`
}

var _ basetypes.ObjectTypable = CompletionsType{}

type CompletionsType struct {
	basetypes.ObjectType
}

func (t CompletionsType) Equal(o attr.Type) bool {
	other, ok := o.(CompletionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CompletionsType) String() string {
	return "CompletionsType"
}

func (t CompletionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	completionAttribute, ok := attributes["completion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completion is missing from object`)

		return nil, diags
	}

	completionVal, ok := completionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completion expected to be basetypes.StringValue, was: %T`, completionAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CompletionsValue{
		Completion: completionVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewCompletionsValueNull() CompletionsValue {
	return CompletionsValue{
		state: attr.ValueStateNull,
	}
}

func NewCompletionsValueUnknown() CompletionsValue {
	return CompletionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCompletionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CompletionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CompletionsValue Attribute Value",
				"While creating a CompletionsValue value, a missing attribute value was detected. "+
					"A CompletionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CompletionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CompletionsValue Attribute Type",
				"While creating a CompletionsValue value, an invalid attribute value was detected. "+
					"A CompletionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CompletionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CompletionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CompletionsValue Attribute Value",
				"While creating a CompletionsValue value, an extra attribute value was detected. "+
					"A CompletionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CompletionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCompletionsValueUnknown(), diags
	}

	completionAttribute, ok := attributes["completion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completion is missing from object`)

		return NewCompletionsValueUnknown(), diags
	}

	completionVal, ok := completionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completion expected to be basetypes.StringValue, was: %T`, completionAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewCompletionsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewCompletionsValueUnknown(), diags
	}

	return CompletionsValue{
		Completion: completionVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewCompletionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CompletionsValue {
	object, diags := NewCompletionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCompletionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CompletionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCompletionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCompletionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCompletionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCompletionsValueMust(CompletionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CompletionsType) ValueType(ctx context.Context) attr.Value {
	return CompletionsValue{}
}

var _ basetypes.ObjectValuable = CompletionsValue{}

type CompletionsValue struct {
	Completion basetypes.StringValue `tfsdk:"completion"`
	Token      basetypes.StringValue `tfsdk:"token"`
	state      attr.ValueState
}

func (v CompletionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["completion"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Completion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["completion"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CompletionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CompletionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CompletionsValue) String() string {
	return "CompletionsValue"
}

func (v CompletionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"completion": basetypes.StringType{},
		"token":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"completion": v.Completion,
			"token":      v.Token,
		})

	return objVal, diags
}

func (v CompletionsValue) Equal(o attr.Value) bool {
	other, ok := o.(CompletionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Completion.Equal(other.Completion) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v CompletionsValue) Type(ctx context.Context) attr.Type {
	return CompletionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CompletionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"completion": basetypes.StringType{},
		"token":      basetypes.StringType{},
	}
}
