// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_auth_user

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AuthUserDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"email": schema.StringAttribute{
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
			},
			"first_name": schema.StringAttribute{
				Computed: true,
			},
			"groups": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "contains the UUIDs of the groups of which the user is a member.",
				MarkdownDescription: "contains the UUIDs of the groups of which the user is a member.",
			},
			"last_name": schema.StringAttribute{
				Computed: true,
			},
			"max_sessions": schema.Int64Attribute{
				Computed: true,
			},
			"password": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"failed_login_since_successful_login": schema.Int64Attribute{
						Computed: true,
					},
					"is_federated_user": schema.BoolAttribute{
						Computed:            true,
						Description:         "True if the user comes from a federated LDAP server",
						MarkdownDescription: "True if the user comes from a federated LDAP server",
					},
					"last_failed_login": schema.StringAttribute{
						Computed: true,
					},
					"last_successful_login": schema.StringAttribute{
						Computed: true,
					},
					"temporarily_disabled": schema.BoolAttribute{
						Computed: true,
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"username": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Required:            true,
				Description:         "The UUID or userid of the user whose user record should be retrieved.",
				MarkdownDescription: "The UUID or userid of the user whose user record should be retrieved.",
			},
		},
	}
}

type AuthUserModel struct {
	Email       types.String `tfsdk:"email"`
	Enabled     types.Bool   `tfsdk:"enabled"`
	FirstName   types.String `tfsdk:"first_name"`
	Groups      types.List   `tfsdk:"groups"`
	LastName    types.String `tfsdk:"last_name"`
	MaxSessions types.Int64  `tfsdk:"max_sessions"`
	Password    types.String `tfsdk:"password"`
	Status      StatusValue  `tfsdk:"status"`
	Username    types.String `tfsdk:"username"`
	Uuid        types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	failedLoginSinceSuccessfulLoginAttribute, ok := attributes["failed_login_since_successful_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`failed_login_since_successful_login is missing from object`)

		return nil, diags
	}

	failedLoginSinceSuccessfulLoginVal, ok := failedLoginSinceSuccessfulLoginAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`failed_login_since_successful_login expected to be basetypes.Int64Value, was: %T`, failedLoginSinceSuccessfulLoginAttribute))
	}

	isFederatedUserAttribute, ok := attributes["is_federated_user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_federated_user is missing from object`)

		return nil, diags
	}

	isFederatedUserVal, ok := isFederatedUserAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_federated_user expected to be basetypes.BoolValue, was: %T`, isFederatedUserAttribute))
	}

	lastFailedLoginAttribute, ok := attributes["last_failed_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_failed_login is missing from object`)

		return nil, diags
	}

	lastFailedLoginVal, ok := lastFailedLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_failed_login expected to be basetypes.StringValue, was: %T`, lastFailedLoginAttribute))
	}

	lastSuccessfulLoginAttribute, ok := attributes["last_successful_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_successful_login is missing from object`)

		return nil, diags
	}

	lastSuccessfulLoginVal, ok := lastSuccessfulLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_successful_login expected to be basetypes.StringValue, was: %T`, lastSuccessfulLoginAttribute))
	}

	temporarilyDisabledAttribute, ok := attributes["temporarily_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`temporarily_disabled is missing from object`)

		return nil, diags
	}

	temporarilyDisabledVal, ok := temporarilyDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`temporarily_disabled expected to be basetypes.BoolValue, was: %T`, temporarilyDisabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		FailedLoginSinceSuccessfulLogin: failedLoginSinceSuccessfulLoginVal,
		IsFederatedUser:                 isFederatedUserVal,
		LastFailedLogin:                 lastFailedLoginVal,
		LastSuccessfulLogin:             lastSuccessfulLoginVal,
		TemporarilyDisabled:             temporarilyDisabledVal,
		state:                           attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	failedLoginSinceSuccessfulLoginAttribute, ok := attributes["failed_login_since_successful_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`failed_login_since_successful_login is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	failedLoginSinceSuccessfulLoginVal, ok := failedLoginSinceSuccessfulLoginAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`failed_login_since_successful_login expected to be basetypes.Int64Value, was: %T`, failedLoginSinceSuccessfulLoginAttribute))
	}

	isFederatedUserAttribute, ok := attributes["is_federated_user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_federated_user is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	isFederatedUserVal, ok := isFederatedUserAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_federated_user expected to be basetypes.BoolValue, was: %T`, isFederatedUserAttribute))
	}

	lastFailedLoginAttribute, ok := attributes["last_failed_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_failed_login is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastFailedLoginVal, ok := lastFailedLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_failed_login expected to be basetypes.StringValue, was: %T`, lastFailedLoginAttribute))
	}

	lastSuccessfulLoginAttribute, ok := attributes["last_successful_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_successful_login is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastSuccessfulLoginVal, ok := lastSuccessfulLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_successful_login expected to be basetypes.StringValue, was: %T`, lastSuccessfulLoginAttribute))
	}

	temporarilyDisabledAttribute, ok := attributes["temporarily_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`temporarily_disabled is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	temporarilyDisabledVal, ok := temporarilyDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`temporarily_disabled expected to be basetypes.BoolValue, was: %T`, temporarilyDisabledAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		FailedLoginSinceSuccessfulLogin: failedLoginSinceSuccessfulLoginVal,
		IsFederatedUser:                 isFederatedUserVal,
		LastFailedLogin:                 lastFailedLoginVal,
		LastSuccessfulLogin:             lastSuccessfulLoginVal,
		TemporarilyDisabled:             temporarilyDisabledVal,
		state:                           attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	FailedLoginSinceSuccessfulLogin basetypes.Int64Value  `tfsdk:"failed_login_since_successful_login"`
	IsFederatedUser                 basetypes.BoolValue   `tfsdk:"is_federated_user"`
	LastFailedLogin                 basetypes.StringValue `tfsdk:"last_failed_login"`
	LastSuccessfulLogin             basetypes.StringValue `tfsdk:"last_successful_login"`
	TemporarilyDisabled             basetypes.BoolValue   `tfsdk:"temporarily_disabled"`
	state                           attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["failed_login_since_successful_login"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["is_federated_user"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["last_failed_login"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_successful_login"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["temporarily_disabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.FailedLoginSinceSuccessfulLogin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["failed_login_since_successful_login"] = val

		val, err = v.IsFederatedUser.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_federated_user"] = val

		val, err = v.LastFailedLogin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_failed_login"] = val

		val, err = v.LastSuccessfulLogin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_successful_login"] = val

		val, err = v.TemporarilyDisabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["temporarily_disabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"failed_login_since_successful_login": basetypes.Int64Type{},
		"is_federated_user":                   basetypes.BoolType{},
		"last_failed_login":                   basetypes.StringType{},
		"last_successful_login":               basetypes.StringType{},
		"temporarily_disabled":                basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"failed_login_since_successful_login": v.FailedLoginSinceSuccessfulLogin,
			"is_federated_user":                   v.IsFederatedUser,
			"last_failed_login":                   v.LastFailedLogin,
			"last_successful_login":               v.LastSuccessfulLogin,
			"temporarily_disabled":                v.TemporarilyDisabled,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FailedLoginSinceSuccessfulLogin.Equal(other.FailedLoginSinceSuccessfulLogin) {
		return false
	}

	if !v.IsFederatedUser.Equal(other.IsFederatedUser) {
		return false
	}

	if !v.LastFailedLogin.Equal(other.LastFailedLogin) {
		return false
	}

	if !v.LastSuccessfulLogin.Equal(other.LastSuccessfulLogin) {
		return false
	}

	if !v.TemporarilyDisabled.Equal(other.TemporarilyDisabled) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"failed_login_since_successful_login": basetypes.Int64Type{},
		"is_federated_user":                   basetypes.BoolType{},
		"last_failed_login":                   basetypes.StringType{},
		"last_successful_login":               basetypes.StringType{},
		"temporarily_disabled":                basetypes.BoolType{},
	}
}
