// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_auth_password_policy

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AuthPasswordPolicyDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allow_user_name": schema.BoolAttribute{
				Computed:            true,
				Description:         "If true, prevents passwords from being or containing the user name.",
				MarkdownDescription: "If true, prevents passwords from being or containing the user name.",
			},
			"digits": schema.Int64Attribute{
				Computed:            true,
				Description:         "Minimum number of digits required in a password. Can be zero.",
				MarkdownDescription: "Minimum number of digits required in a password. Can be zero.",
			},
			"force_expired_password_change": schema.Int64Attribute{
				Computed:            true,
				Description:         "The maximum number of days until a password change is enforced.\nA value of zero means no change is required.",
				MarkdownDescription: "The maximum number of days until a password change is enforced.\nA value of zero means no change is required.",
			},
			"getdefault": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "if set to true, the default password policy definition is returned, rather than the current password policy.",
				MarkdownDescription: "if set to true, the default password policy definition is returned, rather than the current password policy.",
			},
			"hashing_algorithm": schema.StringAttribute{
				Computed:            true,
				Description:         "The hashing algorithm to use when hashing stored passwords.",
				MarkdownDescription: "The hashing algorithm to use when hashing stored passwords.",
			},
			"length": schema.Int64Attribute{
				Computed:            true,
				Description:         "Minimum password length.  This must be at least 1.",
				MarkdownDescription: "Minimum password length.  This must be at least 1.",
			},
			"lower_case": schema.Int64Attribute{
				Computed:            true,
				Description:         "Minimum number of lower case characters required in a password. Can be zero.",
				MarkdownDescription: "Minimum number of lower case characters required in a password. Can be zero.",
			},
			"max_failure_wait_seconds": schema.Int64Attribute{
				Computed:            true,
				Description:         "The number of seconds before the users access will be restored, after too many authentication failures.",
				MarkdownDescription: "The number of seconds before the users access will be restored, after too many authentication failures.",
			},
			"max_login_failure": schema.Int64Attribute{
				Computed:            true,
				Description:         "The number of login/authentication failures before a lockout policy takes effect. Zero means no enforcement.",
				MarkdownDescription: "The number of login/authentication failures before a lockout policy takes effect. Zero means no enforcement.",
			},
			"password_history": schema.Int64Attribute{
				Computed:            true,
				Description:         "The number of passwords remembered to enforce no re-use of passwords. Zero means no re-use enforcement.",
				MarkdownDescription: "The number of passwords remembered to enforce no re-use of passwords. Zero means no re-use enforcement.",
			},
			"permanent_lockout": schema.BoolAttribute{
				Computed:            true,
				Description:         "If true, lockout is permanent and the users access must be re-enabled by an administrator.\nIf false, the users access will be re-enabled after \"maxFailureWaitSeconds\" seconds.",
				MarkdownDescription: "If true, lockout is permanent and the users access must be re-enabled by an administrator.\nIf false, the users access will be re-enabled after \"maxFailureWaitSeconds\" seconds.",
			},
			"reset_time_seconds": schema.Int64Attribute{
				Computed:            true,
				Description:         "When lockout is not permanent, the count of authentication failures for a user will be reset\nthis many seconds after the last authentication failure.",
				MarkdownDescription: "When lockout is not permanent, the count of authentication failures for a user will be reset\nthis many seconds after the last authentication failure.",
			},
			"special_chars": schema.Int64Attribute{
				Computed:            true,
				Description:         "Minimum number of special characters required in a password. Can be zero.",
				MarkdownDescription: "Minimum number of special characters required in a password. Can be zero.",
			},
			"upper_case": schema.Int64Attribute{
				Computed:            true,
				Description:         "Minimum number of upper case characters required in a password. Can be zero.",
				MarkdownDescription: "Minimum number of upper case characters required in a password. Can be zero.",
			},
		},
	}
}

type AuthPasswordPolicyModel struct {
	AllowUserName              types.Bool   `tfsdk:"allow_user_name"`
	Digits                     types.Int64  `tfsdk:"digits"`
	ForceExpiredPasswordChange types.Int64  `tfsdk:"force_expired_password_change"`
	Getdefault                 types.Bool   `tfsdk:"getdefault"`
	HashingAlgorithm           types.String `tfsdk:"hashing_algorithm"`
	Length                     types.Int64  `tfsdk:"length"`
	LowerCase                  types.Int64  `tfsdk:"lower_case"`
	MaxFailureWaitSeconds      types.Int64  `tfsdk:"max_failure_wait_seconds"`
	MaxLoginFailure            types.Int64  `tfsdk:"max_login_failure"`
	PasswordHistory            types.Int64  `tfsdk:"password_history"`
	PermanentLockout           types.Bool   `tfsdk:"permanent_lockout"`
	ResetTimeSeconds           types.Int64  `tfsdk:"reset_time_seconds"`
	SpecialChars               types.Int64  `tfsdk:"special_chars"`
	UpperCase                  types.Int64  `tfsdk:"upper_case"`
}
