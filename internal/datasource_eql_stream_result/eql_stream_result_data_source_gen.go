// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_eql_stream_result

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func EqlStreamResultDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"data": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
					CustomType: DataType{
						ObjectType: types.ObjectType{
							AttrTypes: DataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"json_schema": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
					CustomType: JsonSchemaType{
						ObjectType: types.ObjectType{
							AttrTypes: JsonSchemaValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The JSON schema definition for the query data being returned.",
				MarkdownDescription: "The JSON schema definition for the query data being returned.",
			},
			"namespaces": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "the comma-separated list of namespaces against which the query should be executed",
				MarkdownDescription: "the comma-separated list of namespaces against which the query should be executed",
			},
			"query": schema.StringAttribute{
				Required:            true,
				Description:         "the information being queried, in the EDA query language",
				MarkdownDescription: "the information being queried, in the EDA query language",
			},
			"schema": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"fields": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"alias": schema.BoolAttribute{
									Computed: true,
								},
								"annotations": schema.ListNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"end_char": schema.Int64Attribute{
												Computed: true,
											},
											"start_char": schema.Int64Attribute{
												Computed: true,
											},
										},
										CustomType: AnnotationsType{
											ObjectType: types.ObjectType{
												AttrTypes: AnnotationsValue{}.AttributeTypes(ctx),
											},
										},
									},
									Computed: true,
								},
								"display_name": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: FieldsType{
								ObjectType: types.ObjectType{
									AttrTypes: FieldsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed: true,
					},
				},
				CustomType: SchemaType{
					ObjectType: types.ObjectType{
						AttrTypes: SchemaValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
		},
	}
}

type EqlStreamResultModel struct {
	Data       types.List   `tfsdk:"data"`
	JsonSchema types.Map    `tfsdk:"json_schema"`
	Namespaces types.String `tfsdk:"namespaces"`
	Query      types.String `tfsdk:"query"`
	Schema     SchemaValue  `tfsdk:"schema"`
}

var _ basetypes.ObjectTypable = DataType{}

type DataType struct {
	basetypes.ObjectType
}

func (t DataType) Equal(o attr.Type) bool {
	other, ok := o.(DataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DataType) String() string {
	return "DataType"
}

func (t DataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return DataValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewDataValueNull() DataValue {
	return DataValue{
		state: attr.ValueStateNull,
	}
}

func NewDataValueUnknown() DataValue {
	return DataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DataValue Attribute Value",
				"While creating a DataValue value, a missing attribute value was detected. "+
					"A DataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DataValue Attribute Type",
				"While creating a DataValue value, an invalid attribute value was detected. "+
					"A DataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DataValue Attribute Value",
				"While creating a DataValue value, an extra attribute value was detected. "+
					"A DataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	return DataValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DataValue {
	object, diags := NewDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDataValueMust(DataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DataType) ValueType(ctx context.Context) attr.Value {
	return DataValue{}
}

var _ basetypes.ObjectValuable = DataValue{}

type DataValue struct {
	state attr.ValueState
}

func (v DataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DataValue) String() string {
	return "DataValue"
}

func (v DataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v DataValue) Equal(o attr.Value) bool {
	other, ok := o.(DataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v DataValue) Type(ctx context.Context) attr.Type {
	return DataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = JsonSchemaType{}

type JsonSchemaType struct {
	basetypes.ObjectType
}

func (t JsonSchemaType) Equal(o attr.Type) bool {
	other, ok := o.(JsonSchemaType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t JsonSchemaType) String() string {
	return "JsonSchemaType"
}

func (t JsonSchemaType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return JsonSchemaValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewJsonSchemaValueNull() JsonSchemaValue {
	return JsonSchemaValue{
		state: attr.ValueStateNull,
	}
}

func NewJsonSchemaValueUnknown() JsonSchemaValue {
	return JsonSchemaValue{
		state: attr.ValueStateUnknown,
	}
}

func NewJsonSchemaValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (JsonSchemaValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing JsonSchemaValue Attribute Value",
				"While creating a JsonSchemaValue value, a missing attribute value was detected. "+
					"A JsonSchemaValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("JsonSchemaValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid JsonSchemaValue Attribute Type",
				"While creating a JsonSchemaValue value, an invalid attribute value was detected. "+
					"A JsonSchemaValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("JsonSchemaValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("JsonSchemaValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra JsonSchemaValue Attribute Value",
				"While creating a JsonSchemaValue value, an extra attribute value was detected. "+
					"A JsonSchemaValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra JsonSchemaValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewJsonSchemaValueUnknown(), diags
	}

	if diags.HasError() {
		return NewJsonSchemaValueUnknown(), diags
	}

	return JsonSchemaValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewJsonSchemaValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) JsonSchemaValue {
	object, diags := NewJsonSchemaValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewJsonSchemaValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t JsonSchemaType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewJsonSchemaValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewJsonSchemaValueUnknown(), nil
	}

	if in.IsNull() {
		return NewJsonSchemaValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewJsonSchemaValueMust(JsonSchemaValue{}.AttributeTypes(ctx), attributes), nil
}

func (t JsonSchemaType) ValueType(ctx context.Context) attr.Value {
	return JsonSchemaValue{}
}

var _ basetypes.ObjectValuable = JsonSchemaValue{}

type JsonSchemaValue struct {
	state attr.ValueState
}

func (v JsonSchemaValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v JsonSchemaValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v JsonSchemaValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v JsonSchemaValue) String() string {
	return "JsonSchemaValue"
}

func (v JsonSchemaValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v JsonSchemaValue) Equal(o attr.Value) bool {
	other, ok := o.(JsonSchemaValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v JsonSchemaValue) Type(ctx context.Context) attr.Type {
	return JsonSchemaType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v JsonSchemaValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = SchemaType{}

type SchemaType struct {
	basetypes.ObjectType
}

func (t SchemaType) Equal(o attr.Type) bool {
	other, ok := o.(SchemaType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchemaType) String() string {
	return "SchemaType"
}

func (t SchemaType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return nil, diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SchemaValue{
		Fields: fieldsVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewSchemaValueNull() SchemaValue {
	return SchemaValue{
		state: attr.ValueStateNull,
	}
}

func NewSchemaValueUnknown() SchemaValue {
	return SchemaValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchemaValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchemaValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchemaValue Attribute Value",
				"While creating a SchemaValue value, a missing attribute value was detected. "+
					"A SchemaValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchemaValue Attribute Type",
				"While creating a SchemaValue value, an invalid attribute value was detected. "+
					"A SchemaValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchemaValue Attribute Value",
				"While creating a SchemaValue value, an extra attribute value was detected. "+
					"A SchemaValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchemaValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchemaValueUnknown(), diags
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return NewSchemaValueUnknown(), diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	if diags.HasError() {
		return NewSchemaValueUnknown(), diags
	}

	return SchemaValue{
		Fields: fieldsVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewSchemaValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchemaValue {
	object, diags := NewSchemaValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchemaValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchemaType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchemaValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchemaValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchemaValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchemaValueMust(SchemaValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchemaType) ValueType(ctx context.Context) attr.Value {
	return SchemaValue{}
}

var _ basetypes.ObjectValuable = SchemaValue{}

type SchemaValue struct {
	Fields basetypes.ListValue `tfsdk:"fields"`
	state  attr.ValueState
}

func (v SchemaValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["fields"] = basetypes.ListType{
		ElemType: FieldsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Fields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fields"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchemaValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchemaValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchemaValue) String() string {
	return "SchemaValue"
}

func (v SchemaValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	fields := types.ListValueMust(
		FieldsType{
			basetypes.ObjectType{
				AttrTypes: FieldsValue{}.AttributeTypes(ctx),
			},
		},
		v.Fields.Elements(),
	)

	if v.Fields.IsNull() {
		fields = types.ListNull(
			FieldsType{
				basetypes.ObjectType{
					AttrTypes: FieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Fields.IsUnknown() {
		fields = types.ListUnknown(
			FieldsType{
				basetypes.ObjectType{
					AttrTypes: FieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"fields": basetypes.ListType{
			ElemType: FieldsValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"fields": fields,
		})

	return objVal, diags
}

func (v SchemaValue) Equal(o attr.Value) bool {
	other, ok := o.(SchemaValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Fields.Equal(other.Fields) {
		return false
	}

	return true
}

func (v SchemaValue) Type(ctx context.Context) attr.Type {
	return SchemaType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchemaValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"fields": basetypes.ListType{
			ElemType: FieldsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = FieldsType{}

type FieldsType struct {
	basetypes.ObjectType
}

func (t FieldsType) Equal(o attr.Type) bool {
	other, ok := o.(FieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FieldsType) String() string {
	return "FieldsType"
}

func (t FieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return nil, diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.BoolValue, was: %T`, aliasAttribute))
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.ListValue, was: %T`, annotationsAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return nil, diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FieldsValue{
		Alias:       aliasVal,
		Annotations: annotationsVal,
		DisplayName: displayNameVal,
		Name:        nameVal,
		FieldsType:  typeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewFieldsValueNull() FieldsValue {
	return FieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewFieldsValueUnknown() FieldsValue {
	return FieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FieldsValue Attribute Value",
				"While creating a FieldsValue value, a missing attribute value was detected. "+
					"A FieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FieldsValue Attribute Type",
				"While creating a FieldsValue value, an invalid attribute value was detected. "+
					"A FieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FieldsValue Attribute Value",
				"While creating a FieldsValue value, an extra attribute value was detected. "+
					"A FieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFieldsValueUnknown(), diags
	}

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return NewFieldsValueUnknown(), diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.BoolValue, was: %T`, aliasAttribute))
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewFieldsValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.ListValue, was: %T`, annotationsAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return NewFieldsValueUnknown(), diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFieldsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewFieldsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewFieldsValueUnknown(), diags
	}

	return FieldsValue{
		Alias:       aliasVal,
		Annotations: annotationsVal,
		DisplayName: displayNameVal,
		Name:        nameVal,
		FieldsType:  typeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FieldsValue {
	object, diags := NewFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFieldsValueMust(FieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FieldsType) ValueType(ctx context.Context) attr.Value {
	return FieldsValue{}
}

var _ basetypes.ObjectValuable = FieldsValue{}

type FieldsValue struct {
	Alias       basetypes.BoolValue   `tfsdk:"alias"`
	Annotations basetypes.ListValue   `tfsdk:"annotations"`
	DisplayName basetypes.StringValue `tfsdk:"display_name"`
	Name        basetypes.StringValue `tfsdk:"name"`
	FieldsType  basetypes.StringValue `tfsdk:"type"`
	state       attr.ValueState
}

func (v FieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["alias"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["annotations"] = basetypes.ListType{
		ElemType: AnnotationsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["display_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Alias.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alias"] = val

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.DisplayName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_name"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.FieldsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FieldsValue) String() string {
	return "FieldsValue"
}

func (v FieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	annotations := types.ListValueMust(
		AnnotationsType{
			basetypes.ObjectType{
				AttrTypes: AnnotationsValue{}.AttributeTypes(ctx),
			},
		},
		v.Annotations.Elements(),
	)

	if v.Annotations.IsNull() {
		annotations = types.ListNull(
			AnnotationsType{
				basetypes.ObjectType{
					AttrTypes: AnnotationsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Annotations.IsUnknown() {
		annotations = types.ListUnknown(
			AnnotationsType{
				basetypes.ObjectType{
					AttrTypes: AnnotationsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"alias": basetypes.BoolType{},
		"annotations": basetypes.ListType{
			ElemType: AnnotationsValue{}.Type(ctx),
		},
		"display_name": basetypes.StringType{},
		"name":         basetypes.StringType{},
		"type":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alias":        v.Alias,
			"annotations":  annotations,
			"display_name": v.DisplayName,
			"name":         v.Name,
			"type":         v.FieldsType,
		})

	return objVal, diags
}

func (v FieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(FieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Alias.Equal(other.Alias) {
		return false
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.DisplayName.Equal(other.DisplayName) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.FieldsType.Equal(other.FieldsType) {
		return false
	}

	return true
}

func (v FieldsValue) Type(ctx context.Context) attr.Type {
	return FieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alias": basetypes.BoolType{},
		"annotations": basetypes.ListType{
			ElemType: AnnotationsValue{}.Type(ctx),
		},
		"display_name": basetypes.StringType{},
		"name":         basetypes.StringType{},
		"type":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AnnotationsType{}

type AnnotationsType struct {
	basetypes.ObjectType
}

func (t AnnotationsType) Equal(o attr.Type) bool {
	other, ok := o.(AnnotationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AnnotationsType) String() string {
	return "AnnotationsType"
}

func (t AnnotationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	endCharAttribute, ok := attributes["end_char"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_char is missing from object`)

		return nil, diags
	}

	endCharVal, ok := endCharAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_char expected to be basetypes.Int64Value, was: %T`, endCharAttribute))
	}

	startCharAttribute, ok := attributes["start_char"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_char is missing from object`)

		return nil, diags
	}

	startCharVal, ok := startCharAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_char expected to be basetypes.Int64Value, was: %T`, startCharAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AnnotationsValue{
		EndChar:   endCharVal,
		StartChar: startCharVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewAnnotationsValueNull() AnnotationsValue {
	return AnnotationsValue{
		state: attr.ValueStateNull,
	}
}

func NewAnnotationsValueUnknown() AnnotationsValue {
	return AnnotationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAnnotationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AnnotationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AnnotationsValue Attribute Value",
				"While creating a AnnotationsValue value, a missing attribute value was detected. "+
					"A AnnotationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AnnotationsValue Attribute Type",
				"While creating a AnnotationsValue value, an invalid attribute value was detected. "+
					"A AnnotationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AnnotationsValue Attribute Value",
				"While creating a AnnotationsValue value, an extra attribute value was detected. "+
					"A AnnotationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AnnotationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAnnotationsValueUnknown(), diags
	}

	endCharAttribute, ok := attributes["end_char"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_char is missing from object`)

		return NewAnnotationsValueUnknown(), diags
	}

	endCharVal, ok := endCharAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_char expected to be basetypes.Int64Value, was: %T`, endCharAttribute))
	}

	startCharAttribute, ok := attributes["start_char"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_char is missing from object`)

		return NewAnnotationsValueUnknown(), diags
	}

	startCharVal, ok := startCharAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_char expected to be basetypes.Int64Value, was: %T`, startCharAttribute))
	}

	if diags.HasError() {
		return NewAnnotationsValueUnknown(), diags
	}

	return AnnotationsValue{
		EndChar:   endCharVal,
		StartChar: startCharVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewAnnotationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AnnotationsValue {
	object, diags := NewAnnotationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAnnotationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AnnotationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAnnotationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAnnotationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAnnotationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAnnotationsValueMust(AnnotationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AnnotationsType) ValueType(ctx context.Context) attr.Value {
	return AnnotationsValue{}
}

var _ basetypes.ObjectValuable = AnnotationsValue{}

type AnnotationsValue struct {
	EndChar   basetypes.Int64Value `tfsdk:"end_char"`
	StartChar basetypes.Int64Value `tfsdk:"start_char"`
	state     attr.ValueState
}

func (v AnnotationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["end_char"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["start_char"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.EndChar.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end_char"] = val

		val, err = v.StartChar.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_char"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AnnotationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AnnotationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AnnotationsValue) String() string {
	return "AnnotationsValue"
}

func (v AnnotationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"end_char":   basetypes.Int64Type{},
		"start_char": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"end_char":   v.EndChar,
			"start_char": v.StartChar,
		})

	return objVal, diags
}

func (v AnnotationsValue) Equal(o attr.Value) bool {
	other, ok := o.(AnnotationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.EndChar.Equal(other.EndChar) {
		return false
	}

	if !v.StartChar.Equal(other.StartChar) {
		return false
	}

	return true
}

func (v AnnotationsValue) Type(ctx context.Context) attr.Type {
	return AnnotationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AnnotationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"end_char":   basetypes.Int64Type{},
		"start_char": basetypes.Int64Type{},
	}
}
