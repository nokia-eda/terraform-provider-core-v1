// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_node_config_response

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func NodeConfigResponseDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"annotations": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cr": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"gvk": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"group": schema.StringAttribute{
											Computed:            true,
											Description:         "Name of the API group",
											MarkdownDescription: "Name of the API group",
										},
										"kind": schema.StringAttribute{
											Computed:            true,
											Description:         "The Kind of the resource",
											MarkdownDescription: "The Kind of the resource",
										},
										"version": schema.StringAttribute{
											Computed:            true,
											Description:         "Version of the API group",
											MarkdownDescription: "Version of the API group",
										},
									},
									CustomType: GvkType{
										ObjectType: types.ObjectType{
											AttrTypes: GvkValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"namespace": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: CrType{
								ObjectType: types.ObjectType{
									AttrTypes: CrValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"lines": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"end_line": schema.Int64Attribute{
										Computed: true,
									},
									"start_line": schema.Int64Attribute{
										Computed: true,
									},
								},
								CustomType: LinesType{
									ObjectType: types.ObjectType{
										AttrTypes: LinesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
					},
					CustomType: AnnotationsType{
						ObjectType: types.ObjectType{
							AttrTypes: AnnotationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The the list of annotations for the node configuration",
				MarkdownDescription: "The the list of annotations for the node configuration",
			},
			"node_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the node whose config are being requested",
				MarkdownDescription: "The name of the node whose config are being requested",
			},
			"ns_name": schema.StringAttribute{
				Required:            true,
				Description:         "The namespace of the node whose config are being requested",
				MarkdownDescription: "The namespace of the node whose config are being requested",
			},
			"running": schema.StringAttribute{
				Computed:            true,
				Description:         "The current node configuration for the node",
				MarkdownDescription: "The current node configuration for the node",
			},
		},
	}
}

type NodeConfigResponseModel struct {
	Annotations types.List   `tfsdk:"annotations"`
	NodeName    types.String `tfsdk:"node_name"`
	NsName      types.String `tfsdk:"ns_name"`
	Running     types.String `tfsdk:"running"`
}

var _ basetypes.ObjectTypable = AnnotationsType{}

type AnnotationsType struct {
	basetypes.ObjectType
}

func (t AnnotationsType) Equal(o attr.Type) bool {
	other, ok := o.(AnnotationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AnnotationsType) String() string {
	return "AnnotationsType"
}

func (t AnnotationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	crAttribute, ok := attributes["cr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cr is missing from object`)

		return nil, diags
	}

	crVal, ok := crAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cr expected to be basetypes.ObjectValue, was: %T`, crAttribute))
	}

	linesAttribute, ok := attributes["lines"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lines is missing from object`)

		return nil, diags
	}

	linesVal, ok := linesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lines expected to be basetypes.ListValue, was: %T`, linesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AnnotationsValue{
		Cr:    crVal,
		Lines: linesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAnnotationsValueNull() AnnotationsValue {
	return AnnotationsValue{
		state: attr.ValueStateNull,
	}
}

func NewAnnotationsValueUnknown() AnnotationsValue {
	return AnnotationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAnnotationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AnnotationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AnnotationsValue Attribute Value",
				"While creating a AnnotationsValue value, a missing attribute value was detected. "+
					"A AnnotationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AnnotationsValue Attribute Type",
				"While creating a AnnotationsValue value, an invalid attribute value was detected. "+
					"A AnnotationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AnnotationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AnnotationsValue Attribute Value",
				"While creating a AnnotationsValue value, an extra attribute value was detected. "+
					"A AnnotationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AnnotationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAnnotationsValueUnknown(), diags
	}

	crAttribute, ok := attributes["cr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cr is missing from object`)

		return NewAnnotationsValueUnknown(), diags
	}

	crVal, ok := crAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cr expected to be basetypes.ObjectValue, was: %T`, crAttribute))
	}

	linesAttribute, ok := attributes["lines"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lines is missing from object`)

		return NewAnnotationsValueUnknown(), diags
	}

	linesVal, ok := linesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lines expected to be basetypes.ListValue, was: %T`, linesAttribute))
	}

	if diags.HasError() {
		return NewAnnotationsValueUnknown(), diags
	}

	return AnnotationsValue{
		Cr:    crVal,
		Lines: linesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAnnotationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AnnotationsValue {
	object, diags := NewAnnotationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAnnotationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AnnotationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAnnotationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAnnotationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAnnotationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAnnotationsValueMust(AnnotationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AnnotationsType) ValueType(ctx context.Context) attr.Value {
	return AnnotationsValue{}
}

var _ basetypes.ObjectValuable = AnnotationsValue{}

type AnnotationsValue struct {
	Cr    basetypes.ObjectValue `tfsdk:"cr"`
	Lines basetypes.ListValue   `tfsdk:"lines"`
	state attr.ValueState
}

func (v AnnotationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["cr"] = basetypes.ObjectType{
		AttrTypes: CrValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["lines"] = basetypes.ListType{
		ElemType: LinesValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Cr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cr"] = val

		val, err = v.Lines.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lines"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AnnotationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AnnotationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AnnotationsValue) String() string {
	return "AnnotationsValue"
}

func (v AnnotationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cr basetypes.ObjectValue

	if v.Cr.IsNull() {
		cr = types.ObjectNull(
			CrValue{}.AttributeTypes(ctx),
		)
	}

	if v.Cr.IsUnknown() {
		cr = types.ObjectUnknown(
			CrValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Cr.IsNull() && !v.Cr.IsUnknown() {
		cr = types.ObjectValueMust(
			CrValue{}.AttributeTypes(ctx),
			v.Cr.Attributes(),
		)
	}

	lines := types.ListValueMust(
		LinesType{
			basetypes.ObjectType{
				AttrTypes: LinesValue{}.AttributeTypes(ctx),
			},
		},
		v.Lines.Elements(),
	)

	if v.Lines.IsNull() {
		lines = types.ListNull(
			LinesType{
				basetypes.ObjectType{
					AttrTypes: LinesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Lines.IsUnknown() {
		lines = types.ListUnknown(
			LinesType{
				basetypes.ObjectType{
					AttrTypes: LinesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"cr": basetypes.ObjectType{
			AttrTypes: CrValue{}.AttributeTypes(ctx),
		},
		"lines": basetypes.ListType{
			ElemType: LinesValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cr":    cr,
			"lines": lines,
		})

	return objVal, diags
}

func (v AnnotationsValue) Equal(o attr.Value) bool {
	other, ok := o.(AnnotationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cr.Equal(other.Cr) {
		return false
	}

	if !v.Lines.Equal(other.Lines) {
		return false
	}

	return true
}

func (v AnnotationsValue) Type(ctx context.Context) attr.Type {
	return AnnotationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AnnotationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cr": basetypes.ObjectType{
			AttrTypes: CrValue{}.AttributeTypes(ctx),
		},
		"lines": basetypes.ListType{
			ElemType: LinesValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CrType{}

type CrType struct {
	basetypes.ObjectType
}

func (t CrType) Equal(o attr.Type) bool {
	other, ok := o.(CrType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CrType) String() string {
	return "CrType"
}

func (t CrType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	gvkAttribute, ok := attributes["gvk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gvk is missing from object`)

		return nil, diags
	}

	gvkVal, ok := gvkAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gvk expected to be basetypes.ObjectValue, was: %T`, gvkAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CrValue{
		Gvk:       gvkVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCrValueNull() CrValue {
	return CrValue{
		state: attr.ValueStateNull,
	}
}

func NewCrValueUnknown() CrValue {
	return CrValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCrValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CrValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CrValue Attribute Value",
				"While creating a CrValue value, a missing attribute value was detected. "+
					"A CrValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CrValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CrValue Attribute Type",
				"While creating a CrValue value, an invalid attribute value was detected. "+
					"A CrValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CrValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CrValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CrValue Attribute Value",
				"While creating a CrValue value, an extra attribute value was detected. "+
					"A CrValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CrValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCrValueUnknown(), diags
	}

	gvkAttribute, ok := attributes["gvk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gvk is missing from object`)

		return NewCrValueUnknown(), diags
	}

	gvkVal, ok := gvkAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gvk expected to be basetypes.ObjectValue, was: %T`, gvkAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCrValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewCrValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewCrValueUnknown(), diags
	}

	return CrValue{
		Gvk:       gvkVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCrValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CrValue {
	object, diags := NewCrValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCrValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CrType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCrValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCrValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCrValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCrValueMust(CrValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CrType) ValueType(ctx context.Context) attr.Value {
	return CrValue{}
}

var _ basetypes.ObjectValuable = CrValue{}

type CrValue struct {
	Gvk       basetypes.ObjectValue `tfsdk:"gvk"`
	Name      basetypes.StringValue `tfsdk:"name"`
	Namespace basetypes.StringValue `tfsdk:"namespace"`
	state     attr.ValueState
}

func (v CrValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["gvk"] = basetypes.ObjectType{
		AttrTypes: GvkValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Gvk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gvk"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CrValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CrValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CrValue) String() string {
	return "CrValue"
}

func (v CrValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gvk basetypes.ObjectValue

	if v.Gvk.IsNull() {
		gvk = types.ObjectNull(
			GvkValue{}.AttributeTypes(ctx),
		)
	}

	if v.Gvk.IsUnknown() {
		gvk = types.ObjectUnknown(
			GvkValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Gvk.IsNull() && !v.Gvk.IsUnknown() {
		gvk = types.ObjectValueMust(
			GvkValue{}.AttributeTypes(ctx),
			v.Gvk.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"gvk": basetypes.ObjectType{
			AttrTypes: GvkValue{}.AttributeTypes(ctx),
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"gvk":       gvk,
			"name":      v.Name,
			"namespace": v.Namespace,
		})

	return objVal, diags
}

func (v CrValue) Equal(o attr.Value) bool {
	other, ok := o.(CrValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Gvk.Equal(other.Gvk) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v CrValue) Type(ctx context.Context) attr.Type {
	return CrType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CrValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"gvk": basetypes.ObjectType{
			AttrTypes: GvkValue{}.AttributeTypes(ctx),
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GvkType{}

type GvkType struct {
	basetypes.ObjectType
}

func (t GvkType) Equal(o attr.Type) bool {
	other, ok := o.(GvkType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GvkType) String() string {
	return "GvkType"
}

func (t GvkType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GvkValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGvkValueNull() GvkValue {
	return GvkValue{
		state: attr.ValueStateNull,
	}
}

func NewGvkValueUnknown() GvkValue {
	return GvkValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGvkValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GvkValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GvkValue Attribute Value",
				"While creating a GvkValue value, a missing attribute value was detected. "+
					"A GvkValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GvkValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GvkValue Attribute Type",
				"While creating a GvkValue value, an invalid attribute value was detected. "+
					"A GvkValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GvkValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GvkValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GvkValue Attribute Value",
				"While creating a GvkValue value, an extra attribute value was detected. "+
					"A GvkValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GvkValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGvkValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewGvkValueUnknown(), diags
	}

	return GvkValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGvkValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GvkValue {
	object, diags := NewGvkValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGvkValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GvkType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGvkValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGvkValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGvkValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGvkValueMust(GvkValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GvkType) ValueType(ctx context.Context) attr.Value {
	return GvkValue{}
}

var _ basetypes.ObjectValuable = GvkValue{}

type GvkValue struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v GvkValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GvkValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GvkValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GvkValue) String() string {
	return "GvkValue"
}

func (v GvkValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v GvkValue) Equal(o attr.Value) bool {
	other, ok := o.(GvkValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v GvkValue) Type(ctx context.Context) attr.Type {
	return GvkType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GvkValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinesType{}

type LinesType struct {
	basetypes.ObjectType
}

func (t LinesType) Equal(o attr.Type) bool {
	other, ok := o.(LinesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinesType) String() string {
	return "LinesType"
}

func (t LinesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	endLineAttribute, ok := attributes["end_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_line is missing from object`)

		return nil, diags
	}

	endLineVal, ok := endLineAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_line expected to be basetypes.Int64Value, was: %T`, endLineAttribute))
	}

	startLineAttribute, ok := attributes["start_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_line is missing from object`)

		return nil, diags
	}

	startLineVal, ok := startLineAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_line expected to be basetypes.Int64Value, was: %T`, startLineAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinesValue{
		EndLine:   endLineVal,
		StartLine: startLineVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewLinesValueNull() LinesValue {
	return LinesValue{
		state: attr.ValueStateNull,
	}
}

func NewLinesValueUnknown() LinesValue {
	return LinesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinesValue Attribute Value",
				"While creating a LinesValue value, a missing attribute value was detected. "+
					"A LinesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinesValue Attribute Type",
				"While creating a LinesValue value, an invalid attribute value was detected. "+
					"A LinesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinesValue Attribute Value",
				"While creating a LinesValue value, an extra attribute value was detected. "+
					"A LinesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinesValueUnknown(), diags
	}

	endLineAttribute, ok := attributes["end_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_line is missing from object`)

		return NewLinesValueUnknown(), diags
	}

	endLineVal, ok := endLineAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_line expected to be basetypes.Int64Value, was: %T`, endLineAttribute))
	}

	startLineAttribute, ok := attributes["start_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_line is missing from object`)

		return NewLinesValueUnknown(), diags
	}

	startLineVal, ok := startLineAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_line expected to be basetypes.Int64Value, was: %T`, startLineAttribute))
	}

	if diags.HasError() {
		return NewLinesValueUnknown(), diags
	}

	return LinesValue{
		EndLine:   endLineVal,
		StartLine: startLineVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewLinesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinesValue {
	object, diags := NewLinesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinesValueMust(LinesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinesType) ValueType(ctx context.Context) attr.Value {
	return LinesValue{}
}

var _ basetypes.ObjectValuable = LinesValue{}

type LinesValue struct {
	EndLine   basetypes.Int64Value `tfsdk:"end_line"`
	StartLine basetypes.Int64Value `tfsdk:"start_line"`
	state     attr.ValueState
}

func (v LinesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["end_line"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["start_line"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.EndLine.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end_line"] = val

		val, err = v.StartLine.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_line"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinesValue) String() string {
	return "LinesValue"
}

func (v LinesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"end_line":   basetypes.Int64Type{},
		"start_line": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"end_line":   v.EndLine,
			"start_line": v.StartLine,
		})

	return objVal, diags
}

func (v LinesValue) Equal(o attr.Value) bool {
	other, ok := o.(LinesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.EndLine.Equal(other.EndLine) {
		return false
	}

	if !v.StartLine.Equal(other.StartLine) {
		return false
	}

	return true
}

func (v LinesValue) Type(ctx context.Context) attr.Type {
	return LinesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"end_line":   basetypes.Int64Type{},
		"start_line": basetypes.Int64Type{},
	}
}
