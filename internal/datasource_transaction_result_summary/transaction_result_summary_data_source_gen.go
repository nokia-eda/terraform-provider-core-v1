// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_transaction_result_summary

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TransactionResultSummaryDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"commit_hash": schema.StringAttribute{
				Computed:            true,
				Description:         "The git commit hash for the transaction",
				MarkdownDescription: "The git commit hash for the transaction",
			},
			"description": schema.StringAttribute{
				Computed:            true,
				Description:         "The description of the transaction, as posted in the transaction request.",
				MarkdownDescription: "The description of the transaction, as posted in the transaction request.",
			},
			"details": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of details available for the transaction, as posted in the transaction request.",
				MarkdownDescription: "The type of details available for the transaction, as posted in the transaction request.",
			},
			"dry_run": schema.BoolAttribute{
				Computed:            true,
				Description:         "If true the transaction was not committed and ran in dry run mode.",
				MarkdownDescription: "If true the transaction was not committed and ran in dry run mode.",
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The transaction identifier",
				MarkdownDescription: "The transaction identifier",
			},
			"last_change_timestamp": schema.StringAttribute{
				Computed:            true,
				Description:         "The time that the transaction completed.",
				MarkdownDescription: "The time that the transaction completed.",
			},
			"state": schema.StringAttribute{
				Computed:            true,
				Description:         "The state of the transaction.",
				MarkdownDescription: "The state of the transaction.",
			},
			"success": schema.BoolAttribute{
				Computed:            true,
				Description:         "True if the transaction was successful.",
				MarkdownDescription: "True if the transaction was successful.",
			},
			"transaction_id": schema.Int64Attribute{
				Required:            true,
				Description:         "The identifier for the transaction whose state is being requested",
				MarkdownDescription: "The identifier for the transaction whose state is being requested",
			},
			"username": schema.StringAttribute{
				Computed:            true,
				Description:         "The user who posted the transaction.",
				MarkdownDescription: "The user who posted the transaction.",
			},
		},
	}
}

type TransactionResultSummaryModel struct {
	CommitHash          types.String `tfsdk:"commit_hash"`
	Description         types.String `tfsdk:"description"`
	Details             types.String `tfsdk:"details"`
	DryRun              types.Bool   `tfsdk:"dry_run"`
	Id                  types.Int64  `tfsdk:"id"`
	LastChangeTimestamp types.String `tfsdk:"last_change_timestamp"`
	State               types.String `tfsdk:"state"`
	Success             types.Bool   `tfsdk:"success"`
	TransactionId       types.Int64  `tfsdk:"transaction_id"`
	Username            types.String `tfsdk:"username"`
}
