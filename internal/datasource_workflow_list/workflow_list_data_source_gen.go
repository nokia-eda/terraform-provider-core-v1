// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_workflow_list

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WorkflowListDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"flows": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The id of the workflow",
							MarkdownDescription: "The id of the workflow",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the workflow",
							MarkdownDescription: "Name of the workflow",
						},
						"namespace": schema.StringAttribute{
							Computed:            true,
							Description:         "The namespace in which the workflow ran",
							MarkdownDescription: "The namespace in which the workflow ran",
						},
						"parent_id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The id of the parent workflow, if any",
							MarkdownDescription: "The id of the parent workflow, if any",
						},
						"state": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of workflow",
							MarkdownDescription: "The type of workflow",
						},
					},
					CustomType: FlowsType{
						ObjectType: types.ObjectType{
							AttrTypes: FlowsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"ns_name": schema.StringAttribute{
				Required:            true,
				Description:         "The namespace for the requested workflow list",
				MarkdownDescription: "The namespace for the requested workflow list",
			},
		},
	}
}

type WorkflowListModel struct {
	Flows  types.List   `tfsdk:"flows"`
	NsName types.String `tfsdk:"ns_name"`
}

var _ basetypes.ObjectTypable = FlowsType{}

type FlowsType struct {
	basetypes.ObjectType
}

func (t FlowsType) Equal(o attr.Type) bool {
	other, ok := o.(FlowsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FlowsType) String() string {
	return "FlowsType"
}

func (t FlowsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	parentIdAttribute, ok := attributes["parent_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_id is missing from object`)

		return nil, diags
	}

	parentIdVal, ok := parentIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_id expected to be basetypes.Int64Value, was: %T`, parentIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FlowsValue{
		Id:        idVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		ParentId:  parentIdVal,
		State:     stateVal,
		FlowsType: typeVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewFlowsValueNull() FlowsValue {
	return FlowsValue{
		state: attr.ValueStateNull,
	}
}

func NewFlowsValueUnknown() FlowsValue {
	return FlowsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFlowsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FlowsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FlowsValue Attribute Value",
				"While creating a FlowsValue value, a missing attribute value was detected. "+
					"A FlowsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FlowsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FlowsValue Attribute Type",
				"While creating a FlowsValue value, an invalid attribute value was detected. "+
					"A FlowsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FlowsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FlowsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FlowsValue Attribute Value",
				"While creating a FlowsValue value, an extra attribute value was detected. "+
					"A FlowsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FlowsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFlowsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	parentIdAttribute, ok := attributes["parent_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_id is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	parentIdVal, ok := parentIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_id expected to be basetypes.Int64Value, was: %T`, parentIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewFlowsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewFlowsValueUnknown(), diags
	}

	return FlowsValue{
		Id:        idVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		ParentId:  parentIdVal,
		State:     stateVal,
		FlowsType: typeVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewFlowsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FlowsValue {
	object, diags := NewFlowsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFlowsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FlowsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFlowsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFlowsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFlowsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFlowsValueMust(FlowsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FlowsType) ValueType(ctx context.Context) attr.Value {
	return FlowsValue{}
}

var _ basetypes.ObjectValuable = FlowsValue{}

type FlowsValue struct {
	Id        basetypes.Int64Value  `tfsdk:"id"`
	Name      basetypes.StringValue `tfsdk:"name"`
	Namespace basetypes.StringValue `tfsdk:"namespace"`
	ParentId  basetypes.Int64Value  `tfsdk:"parent_id"`
	State     basetypes.StringValue `tfsdk:"state"`
	FlowsType basetypes.StringValue `tfsdk:"type"`
	state     attr.ValueState
}

func (v FlowsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["parent_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		val, err = v.ParentId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parent_id"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.FlowsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FlowsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FlowsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FlowsValue) String() string {
	return "FlowsValue"
}

func (v FlowsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":        basetypes.Int64Type{},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
		"parent_id": basetypes.Int64Type{},
		"state":     basetypes.StringType{},
		"type":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":        v.Id,
			"name":      v.Name,
			"namespace": v.Namespace,
			"parent_id": v.ParentId,
			"state":     v.State,
			"type":      v.FlowsType,
		})

	return objVal, diags
}

func (v FlowsValue) Equal(o attr.Value) bool {
	other, ok := o.(FlowsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	if !v.ParentId.Equal(other.ParentId) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.FlowsType.Equal(other.FlowsType) {
		return false
	}

	return true
}

func (v FlowsValue) Type(ctx context.Context) attr.Type {
	return FlowsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FlowsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":        basetypes.Int64Type{},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
		"parent_id": basetypes.Int64Type{},
		"state":     basetypes.StringType{},
		"type":      basetypes.StringType{},
	}
}
