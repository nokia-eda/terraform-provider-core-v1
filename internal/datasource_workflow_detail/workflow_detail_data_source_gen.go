// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_workflow_detail

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WorkflowDetailDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"fail_on_errors": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Flag to tell the request to fail if the workflow has errors",
				MarkdownDescription: "Flag to tell the request to fail if the workflow has errors",
			},
			"result_message": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"running_state": schema.StringAttribute{
						Computed: true,
					},
					"state": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: StateType{
					ObjectType: types.ObjectType{
						AttrTypes: StateValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"success": schema.BoolAttribute{
				Computed: true,
			},
			"wait_for_complete": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Flag for the request to wait until the workflow is complete before returning",
				MarkdownDescription: "Flag for the request to wait until the workflow is complete before returning",
			},
			"workflow_id": schema.Int64Attribute{
				Required:            true,
				Description:         "The identifier for the workflow whose details is being requested",
				MarkdownDescription: "The identifier for the workflow whose details is being requested",
			},
		},
	}
}

type WorkflowDetailModel struct {
	ErrorMessage    types.String `tfsdk:"error_message"`
	FailOnErrors    types.String `tfsdk:"fail_on_errors"`
	ResultMessage   types.String `tfsdk:"result_message"`
	State           StateValue   `tfsdk:"state"`
	Success         types.Bool   `tfsdk:"success"`
	WaitForComplete types.String `tfsdk:"wait_for_complete"`
	WorkflowId      types.Int64  `tfsdk:"workflow_id"`
}

var _ basetypes.ObjectTypable = StateType{}

type StateType struct {
	basetypes.ObjectType
}

func (t StateType) Equal(o attr.Type) bool {
	other, ok := o.(StateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StateType) String() string {
	return "StateType"
}

func (t StateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	runningStateAttribute, ok := attributes["running_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`running_state is missing from object`)

		return nil, diags
	}

	runningStateVal, ok := runningStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`running_state expected to be basetypes.StringValue, was: %T`, runningStateAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StateValue{
		RunningState: runningStateVal,
		State:        stateVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewStateValueNull() StateValue {
	return StateValue{
		state: attr.ValueStateNull,
	}
}

func NewStateValueUnknown() StateValue {
	return StateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StateValue Attribute Value",
				"While creating a StateValue value, a missing attribute value was detected. "+
					"A StateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StateValue Attribute Type",
				"While creating a StateValue value, an invalid attribute value was detected. "+
					"A StateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StateValue Attribute Value",
				"While creating a StateValue value, an extra attribute value was detected. "+
					"A StateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStateValueUnknown(), diags
	}

	runningStateAttribute, ok := attributes["running_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`running_state is missing from object`)

		return NewStateValueUnknown(), diags
	}

	runningStateVal, ok := runningStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`running_state expected to be basetypes.StringValue, was: %T`, runningStateAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewStateValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return NewStateValueUnknown(), diags
	}

	return StateValue{
		RunningState: runningStateVal,
		State:        stateVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewStateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StateValue {
	object, diags := NewStateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStateValueMust(StateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StateType) ValueType(ctx context.Context) attr.Value {
	return StateValue{}
}

var _ basetypes.ObjectValuable = StateValue{}

type StateValue struct {
	RunningState basetypes.StringValue `tfsdk:"running_state"`
	State        basetypes.StringValue `tfsdk:"state"`
	state        attr.ValueState
}

func (v StateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["running_state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.RunningState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["running_state"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StateValue) String() string {
	return "StateValue"
}

func (v StateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"running_state": basetypes.StringType{},
		"state":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"running_state": v.RunningState,
			"state":         v.State,
		})

	return objVal, diags
}

func (v StateValue) Equal(o attr.Value) bool {
	other, ok := o.(StateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.RunningState.Equal(other.RunningState) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	return true
}

func (v StateValue) Type(ctx context.Context) attr.Type {
	return StateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"running_state": basetypes.StringType{},
		"state":         basetypes.StringType{},
	}
}
