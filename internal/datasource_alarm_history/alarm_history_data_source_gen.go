// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_alarm_history

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AlarmHistoryDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"alarm_history": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alarm": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"acknowledged": schema.BoolAttribute{
									Computed:            true,
									Description:         "An indication if the alarm has been acknowledged.",
									MarkdownDescription: "An indication if the alarm has been acknowledged.",
								},
								"acknowledged_until": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the end time of the acknowledgement.",
									MarkdownDescription: "Indicates the end time of the acknowledgement.",
								},
								"cleared": schema.BoolAttribute{
									Computed:            true,
									Description:         "An indication if the alarm has been cleared.",
									MarkdownDescription: "An indication if the alarm has been cleared.",
								},
								"cluster_member": schema.StringAttribute{
									Computed:            true,
									Description:         "The cluster member that generated this alarm.",
									MarkdownDescription: "The cluster member that generated this alarm.",
								},
								"description": schema.StringAttribute{
									Computed:            true,
									Description:         "A description for the alarm.",
									MarkdownDescription: "A description for the alarm.",
								},
								"group": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the group of the resource the alarm is present on.",
									MarkdownDescription: "Indicates the group of the resource the alarm is present on.",
								},
								"js_path": schema.StringAttribute{
									Computed:            true,
									Description:         "a unnormalized jspath relating to the object in the alarm state. For\nexample\n.node{.name==\"spine-1-1\"}.srl{.version==\"24.10.1\"}.interface{.name==\"ethernet-1-1\"}.",
									MarkdownDescription: "a unnormalized jspath relating to the object in the alarm state. For\nexample\n.node{.name==\"spine-1-1\"}.srl{.version==\"24.10.1\"}.interface{.name==\"ethernet-1-1\"}.",
								},
								"kind": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the kind of resource the alarm is present on.",
									MarkdownDescription: "Indicates the kind of resource the alarm is present on.",
								},
								"last_acknowledged": schema.StringAttribute{
									Computed:            true,
									Description:         "the time this alarm was last acknowledged.",
									MarkdownDescription: "the time this alarm was last acknowledged.",
								},
								"last_changed": schema.StringAttribute{
									Computed:            true,
									Description:         "The last time that the alarm was changed; as provided by the raiser of the alarm.",
									MarkdownDescription: "The last time that the alarm was changed; as provided by the raiser of the alarm.",
								},
								"last_suppressed": schema.StringAttribute{
									Computed:            true,
									Description:         "the time this alarm was last suppressed.",
									MarkdownDescription: "the time this alarm was last suppressed.",
								},
								"name": schema.StringAttribute{
									Computed:            true,
									Description:         "The unique name for the alarm, e.g. InterfaceDown-spine-1-1-ethernet-1-1.",
									MarkdownDescription: "The unique name for the alarm, e.g. InterfaceDown-spine-1-1-ethernet-1-1.",
								},
								"namespace": schema.StringAttribute{
									Computed:            true,
									Description:         "The namespace of the alarm",
									MarkdownDescription: "The namespace of the alarm",
								},
								"occurrences": schema.Int64Attribute{
									Computed:            true,
									Description:         "The number of occurrences of this alarm (the number of times it has been raised).",
									MarkdownDescription: "The number of occurrences of this alarm (the number of times it has been raised).",
								},
								"parent_alarms": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "The names of other alarms that are parents of this alarm. This may be used to\nfilter out alarms that are not a root cause.",
									MarkdownDescription: "The names of other alarms that are parents of this alarm. This may be used to\nfilter out alarms that are not a root cause.",
								},
								"probable_cause": schema.StringAttribute{
									Computed:            true,
									Description:         "the probable cause for raising the alarm. This field is optional, and\nshould also be a description indicating the primary probable cause of the\nalarm, which may be enriched with relevant information from this specific\nalarm instance. The complete alarm below contains an example.",
									MarkdownDescription: "the probable cause for raising the alarm. This field is optional, and\nshould also be a description indicating the primary probable cause of the\nalarm, which may be enriched with relevant information from this specific\nalarm instance. The complete alarm below contains an example.",
								},
								"remedial_action": schema.StringAttribute{
									Computed:            true,
									Description:         "any remedial actions the user could try to resolve/clear the alarm. This\nfield is optional, and may also be enriched with relevant information\nfrom this specific alarm instance. The complete alarm below contains an\nexample.",
									MarkdownDescription: "any remedial actions the user could try to resolve/clear the alarm. This\nfield is optional, and may also be enriched with relevant information\nfrom this specific alarm instance. The complete alarm below contains an\nexample.",
								},
								"resource": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the resource that this alarm is present on.",
									MarkdownDescription: "The name of the resource that this alarm is present on.",
								},
								"severity": schema.StringAttribute{
									Computed:            true,
									Description:         "Severity of the alarm",
									MarkdownDescription: "Severity of the alarm",
								},
								"source_group": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates indicates the group of the resource that raised this alarm, e.g. interfaces.eda.nokia.com.",
									MarkdownDescription: "Indicates indicates the group of the resource that raised this alarm, e.g. interfaces.eda.nokia.com.",
								},
								"source_kind": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the Kind of the resource that raised this alarm, e.g. InterfaceState.",
									MarkdownDescription: "Indicates the Kind of the resource that raised this alarm, e.g. InterfaceState.",
								},
								"source_resource": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the the name of the resource that raised this alarm, e.g. spine-1-1-ethernet-1-1.",
									MarkdownDescription: "Indicates the the name of the resource that raised this alarm, e.g. spine-1-1-ethernet-1-1.",
								},
								"suppressed": schema.BoolAttribute{
									Computed:            true,
									Description:         "An indication if the alarm has been suppressed.",
									MarkdownDescription: "An indication if the alarm has been suppressed.",
								},
								"suppressed_until": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the end time of the suppression.",
									MarkdownDescription: "Indicates the end time of the suppression.",
								},
								"type": schema.StringAttribute{
									Computed:            true,
									Description:         "A kind for the alarm, e.g. InterfaceDown",
									MarkdownDescription: "A kind for the alarm, e.g. InterfaceDown",
								},
							},
							CustomType: AlarmType{
								ObjectType: types.ObjectType{
									AttrTypes: AlarmValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "The information about a single alarm or alarm history",
							MarkdownDescription: "The information about a single alarm or alarm history",
						},
						"index": schema.StringAttribute{
							Computed:            true,
							Description:         "The index of the history entry within the entries for a single alarm..",
							MarkdownDescription: "The index of the history entry within the entries for a single alarm..",
						},
					},
					CustomType: AlarmHistoryType{
						ObjectType: types.ObjectType{
							AttrTypes: AlarmHistoryValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"alarmname": schema.StringAttribute{
				Required:            true,
				Description:         "name of the alarm whose history should be retrieved.",
				MarkdownDescription: "name of the alarm whose history should be retrieved.",
			},
			"ns_name": schema.StringAttribute{
				Required:            true,
				Description:         "the name of the namespace for the alarm",
				MarkdownDescription: "the name of the namespace for the alarm",
			},
		},
	}
}

type AlarmHistoryModel struct {
	AlarmHistory types.Set    `tfsdk:"alarm_history"`
	Alarmname    types.String `tfsdk:"alarmname"`
	NsName       types.String `tfsdk:"ns_name"`
}

var _ basetypes.ObjectTypable = AlarmHistoryType{}

type AlarmHistoryType struct {
	basetypes.ObjectType
}

func (t AlarmHistoryType) Equal(o attr.Type) bool {
	other, ok := o.(AlarmHistoryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AlarmHistoryType) String() string {
	return "AlarmHistoryType"
}

func (t AlarmHistoryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alarmAttribute, ok := attributes["alarm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarm is missing from object`)

		return nil, diags
	}

	alarmVal, ok := alarmAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarm expected to be basetypes.ObjectValue, was: %T`, alarmAttribute))
	}

	indexAttribute, ok := attributes["index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`index is missing from object`)

		return nil, diags
	}

	indexVal, ok := indexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`index expected to be basetypes.StringValue, was: %T`, indexAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AlarmHistoryValue{
		Alarm: alarmVal,
		Index: indexVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAlarmHistoryValueNull() AlarmHistoryValue {
	return AlarmHistoryValue{
		state: attr.ValueStateNull,
	}
}

func NewAlarmHistoryValueUnknown() AlarmHistoryValue {
	return AlarmHistoryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAlarmHistoryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AlarmHistoryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AlarmHistoryValue Attribute Value",
				"While creating a AlarmHistoryValue value, a missing attribute value was detected. "+
					"A AlarmHistoryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmHistoryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AlarmHistoryValue Attribute Type",
				"While creating a AlarmHistoryValue value, an invalid attribute value was detected. "+
					"A AlarmHistoryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmHistoryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AlarmHistoryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AlarmHistoryValue Attribute Value",
				"While creating a AlarmHistoryValue value, an extra attribute value was detected. "+
					"A AlarmHistoryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AlarmHistoryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAlarmHistoryValueUnknown(), diags
	}

	alarmAttribute, ok := attributes["alarm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarm is missing from object`)

		return NewAlarmHistoryValueUnknown(), diags
	}

	alarmVal, ok := alarmAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarm expected to be basetypes.ObjectValue, was: %T`, alarmAttribute))
	}

	indexAttribute, ok := attributes["index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`index is missing from object`)

		return NewAlarmHistoryValueUnknown(), diags
	}

	indexVal, ok := indexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`index expected to be basetypes.StringValue, was: %T`, indexAttribute))
	}

	if diags.HasError() {
		return NewAlarmHistoryValueUnknown(), diags
	}

	return AlarmHistoryValue{
		Alarm: alarmVal,
		Index: indexVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAlarmHistoryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AlarmHistoryValue {
	object, diags := NewAlarmHistoryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAlarmHistoryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AlarmHistoryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAlarmHistoryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAlarmHistoryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAlarmHistoryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAlarmHistoryValueMust(AlarmHistoryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AlarmHistoryType) ValueType(ctx context.Context) attr.Value {
	return AlarmHistoryValue{}
}

var _ basetypes.ObjectValuable = AlarmHistoryValue{}

type AlarmHistoryValue struct {
	Alarm basetypes.ObjectValue `tfsdk:"alarm"`
	Index basetypes.StringValue `tfsdk:"index"`
	state attr.ValueState
}

func (v AlarmHistoryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["alarm"] = basetypes.ObjectType{
		AttrTypes: AlarmValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["index"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Alarm.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alarm"] = val

		val, err = v.Index.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["index"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AlarmHistoryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AlarmHistoryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AlarmHistoryValue) String() string {
	return "AlarmHistoryValue"
}

func (v AlarmHistoryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var alarm basetypes.ObjectValue

	if v.Alarm.IsNull() {
		alarm = types.ObjectNull(
			AlarmValue{}.AttributeTypes(ctx),
		)
	}

	if v.Alarm.IsUnknown() {
		alarm = types.ObjectUnknown(
			AlarmValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Alarm.IsNull() && !v.Alarm.IsUnknown() {
		alarm = types.ObjectValueMust(
			AlarmValue{}.AttributeTypes(ctx),
			v.Alarm.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"alarm": basetypes.ObjectType{
			AttrTypes: AlarmValue{}.AttributeTypes(ctx),
		},
		"index": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alarm": alarm,
			"index": v.Index,
		})

	return objVal, diags
}

func (v AlarmHistoryValue) Equal(o attr.Value) bool {
	other, ok := o.(AlarmHistoryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Alarm.Equal(other.Alarm) {
		return false
	}

	if !v.Index.Equal(other.Index) {
		return false
	}

	return true
}

func (v AlarmHistoryValue) Type(ctx context.Context) attr.Type {
	return AlarmHistoryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AlarmHistoryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alarm": basetypes.ObjectType{
			AttrTypes: AlarmValue{}.AttributeTypes(ctx),
		},
		"index": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AlarmType{}

type AlarmType struct {
	basetypes.ObjectType
}

func (t AlarmType) Equal(o attr.Type) bool {
	other, ok := o.(AlarmType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AlarmType) String() string {
	return "AlarmType"
}

func (t AlarmType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	acknowledgedAttribute, ok := attributes["acknowledged"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acknowledged is missing from object`)

		return nil, diags
	}

	acknowledgedVal, ok := acknowledgedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acknowledged expected to be basetypes.BoolValue, was: %T`, acknowledgedAttribute))
	}

	acknowledgedUntilAttribute, ok := attributes["acknowledged_until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acknowledged_until is missing from object`)

		return nil, diags
	}

	acknowledgedUntilVal, ok := acknowledgedUntilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acknowledged_until expected to be basetypes.StringValue, was: %T`, acknowledgedUntilAttribute))
	}

	clearedAttribute, ok := attributes["cleared"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cleared is missing from object`)

		return nil, diags
	}

	clearedVal, ok := clearedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cleared expected to be basetypes.BoolValue, was: %T`, clearedAttribute))
	}

	clusterMemberAttribute, ok := attributes["cluster_member"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster_member is missing from object`)

		return nil, diags
	}

	clusterMemberVal, ok := clusterMemberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster_member expected to be basetypes.StringValue, was: %T`, clusterMemberAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	jsPathAttribute, ok := attributes["js_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`js_path is missing from object`)

		return nil, diags
	}

	jsPathVal, ok := jsPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`js_path expected to be basetypes.StringValue, was: %T`, jsPathAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	lastAcknowledgedAttribute, ok := attributes["last_acknowledged"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_acknowledged is missing from object`)

		return nil, diags
	}

	lastAcknowledgedVal, ok := lastAcknowledgedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_acknowledged expected to be basetypes.StringValue, was: %T`, lastAcknowledgedAttribute))
	}

	lastChangedAttribute, ok := attributes["last_changed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_changed is missing from object`)

		return nil, diags
	}

	lastChangedVal, ok := lastChangedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_changed expected to be basetypes.StringValue, was: %T`, lastChangedAttribute))
	}

	lastSuppressedAttribute, ok := attributes["last_suppressed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_suppressed is missing from object`)

		return nil, diags
	}

	lastSuppressedVal, ok := lastSuppressedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_suppressed expected to be basetypes.StringValue, was: %T`, lastSuppressedAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	occurrencesAttribute, ok := attributes["occurrences"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`occurrences is missing from object`)

		return nil, diags
	}

	occurrencesVal, ok := occurrencesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`occurrences expected to be basetypes.Int64Value, was: %T`, occurrencesAttribute))
	}

	parentAlarmsAttribute, ok := attributes["parent_alarms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_alarms is missing from object`)

		return nil, diags
	}

	parentAlarmsVal, ok := parentAlarmsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_alarms expected to be basetypes.ListValue, was: %T`, parentAlarmsAttribute))
	}

	probableCauseAttribute, ok := attributes["probable_cause"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`probable_cause is missing from object`)

		return nil, diags
	}

	probableCauseVal, ok := probableCauseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`probable_cause expected to be basetypes.StringValue, was: %T`, probableCauseAttribute))
	}

	remedialActionAttribute, ok := attributes["remedial_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`remedial_action is missing from object`)

		return nil, diags
	}

	remedialActionVal, ok := remedialActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`remedial_action expected to be basetypes.StringValue, was: %T`, remedialActionAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return nil, diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.StringValue, was: %T`, resourceAttribute))
	}

	severityAttribute, ok := attributes["severity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`severity is missing from object`)

		return nil, diags
	}

	severityVal, ok := severityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`severity expected to be basetypes.StringValue, was: %T`, severityAttribute))
	}

	sourceGroupAttribute, ok := attributes["source_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_group is missing from object`)

		return nil, diags
	}

	sourceGroupVal, ok := sourceGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_group expected to be basetypes.StringValue, was: %T`, sourceGroupAttribute))
	}

	sourceKindAttribute, ok := attributes["source_kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_kind is missing from object`)

		return nil, diags
	}

	sourceKindVal, ok := sourceKindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_kind expected to be basetypes.StringValue, was: %T`, sourceKindAttribute))
	}

	sourceResourceAttribute, ok := attributes["source_resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_resource is missing from object`)

		return nil, diags
	}

	sourceResourceVal, ok := sourceResourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_resource expected to be basetypes.StringValue, was: %T`, sourceResourceAttribute))
	}

	suppressedAttribute, ok := attributes["suppressed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suppressed is missing from object`)

		return nil, diags
	}

	suppressedVal, ok := suppressedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suppressed expected to be basetypes.BoolValue, was: %T`, suppressedAttribute))
	}

	suppressedUntilAttribute, ok := attributes["suppressed_until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suppressed_until is missing from object`)

		return nil, diags
	}

	suppressedUntilVal, ok := suppressedUntilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suppressed_until expected to be basetypes.StringValue, was: %T`, suppressedUntilAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AlarmValue{
		Acknowledged:      acknowledgedVal,
		AcknowledgedUntil: acknowledgedUntilVal,
		Cleared:           clearedVal,
		ClusterMember:     clusterMemberVal,
		Description:       descriptionVal,
		Group:             groupVal,
		JsPath:            jsPathVal,
		Kind:              kindVal,
		LastAcknowledged:  lastAcknowledgedVal,
		LastChanged:       lastChangedVal,
		LastSuppressed:    lastSuppressedVal,
		Name:              nameVal,
		Namespace:         namespaceVal,
		Occurrences:       occurrencesVal,
		ParentAlarms:      parentAlarmsVal,
		ProbableCause:     probableCauseVal,
		RemedialAction:    remedialActionVal,
		Resource:          resourceVal,
		Severity:          severityVal,
		SourceGroup:       sourceGroupVal,
		SourceKind:        sourceKindVal,
		SourceResource:    sourceResourceVal,
		Suppressed:        suppressedVal,
		SuppressedUntil:   suppressedUntilVal,
		AlarmType:         typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewAlarmValueNull() AlarmValue {
	return AlarmValue{
		state: attr.ValueStateNull,
	}
}

func NewAlarmValueUnknown() AlarmValue {
	return AlarmValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAlarmValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AlarmValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AlarmValue Attribute Value",
				"While creating a AlarmValue value, a missing attribute value was detected. "+
					"A AlarmValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AlarmValue Attribute Type",
				"While creating a AlarmValue value, an invalid attribute value was detected. "+
					"A AlarmValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AlarmValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AlarmValue Attribute Value",
				"While creating a AlarmValue value, an extra attribute value was detected. "+
					"A AlarmValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AlarmValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAlarmValueUnknown(), diags
	}

	acknowledgedAttribute, ok := attributes["acknowledged"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acknowledged is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	acknowledgedVal, ok := acknowledgedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acknowledged expected to be basetypes.BoolValue, was: %T`, acknowledgedAttribute))
	}

	acknowledgedUntilAttribute, ok := attributes["acknowledged_until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acknowledged_until is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	acknowledgedUntilVal, ok := acknowledgedUntilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acknowledged_until expected to be basetypes.StringValue, was: %T`, acknowledgedUntilAttribute))
	}

	clearedAttribute, ok := attributes["cleared"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cleared is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	clearedVal, ok := clearedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cleared expected to be basetypes.BoolValue, was: %T`, clearedAttribute))
	}

	clusterMemberAttribute, ok := attributes["cluster_member"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster_member is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	clusterMemberVal, ok := clusterMemberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster_member expected to be basetypes.StringValue, was: %T`, clusterMemberAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	jsPathAttribute, ok := attributes["js_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`js_path is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	jsPathVal, ok := jsPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`js_path expected to be basetypes.StringValue, was: %T`, jsPathAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	lastAcknowledgedAttribute, ok := attributes["last_acknowledged"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_acknowledged is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	lastAcknowledgedVal, ok := lastAcknowledgedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_acknowledged expected to be basetypes.StringValue, was: %T`, lastAcknowledgedAttribute))
	}

	lastChangedAttribute, ok := attributes["last_changed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_changed is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	lastChangedVal, ok := lastChangedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_changed expected to be basetypes.StringValue, was: %T`, lastChangedAttribute))
	}

	lastSuppressedAttribute, ok := attributes["last_suppressed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_suppressed is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	lastSuppressedVal, ok := lastSuppressedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_suppressed expected to be basetypes.StringValue, was: %T`, lastSuppressedAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	occurrencesAttribute, ok := attributes["occurrences"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`occurrences is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	occurrencesVal, ok := occurrencesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`occurrences expected to be basetypes.Int64Value, was: %T`, occurrencesAttribute))
	}

	parentAlarmsAttribute, ok := attributes["parent_alarms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_alarms is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	parentAlarmsVal, ok := parentAlarmsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_alarms expected to be basetypes.ListValue, was: %T`, parentAlarmsAttribute))
	}

	probableCauseAttribute, ok := attributes["probable_cause"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`probable_cause is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	probableCauseVal, ok := probableCauseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`probable_cause expected to be basetypes.StringValue, was: %T`, probableCauseAttribute))
	}

	remedialActionAttribute, ok := attributes["remedial_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`remedial_action is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	remedialActionVal, ok := remedialActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`remedial_action expected to be basetypes.StringValue, was: %T`, remedialActionAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.StringValue, was: %T`, resourceAttribute))
	}

	severityAttribute, ok := attributes["severity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`severity is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	severityVal, ok := severityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`severity expected to be basetypes.StringValue, was: %T`, severityAttribute))
	}

	sourceGroupAttribute, ok := attributes["source_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_group is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	sourceGroupVal, ok := sourceGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_group expected to be basetypes.StringValue, was: %T`, sourceGroupAttribute))
	}

	sourceKindAttribute, ok := attributes["source_kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_kind is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	sourceKindVal, ok := sourceKindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_kind expected to be basetypes.StringValue, was: %T`, sourceKindAttribute))
	}

	sourceResourceAttribute, ok := attributes["source_resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_resource is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	sourceResourceVal, ok := sourceResourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_resource expected to be basetypes.StringValue, was: %T`, sourceResourceAttribute))
	}

	suppressedAttribute, ok := attributes["suppressed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suppressed is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	suppressedVal, ok := suppressedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suppressed expected to be basetypes.BoolValue, was: %T`, suppressedAttribute))
	}

	suppressedUntilAttribute, ok := attributes["suppressed_until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suppressed_until is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	suppressedUntilVal, ok := suppressedUntilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suppressed_until expected to be basetypes.StringValue, was: %T`, suppressedUntilAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewAlarmValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewAlarmValueUnknown(), diags
	}

	return AlarmValue{
		Acknowledged:      acknowledgedVal,
		AcknowledgedUntil: acknowledgedUntilVal,
		Cleared:           clearedVal,
		ClusterMember:     clusterMemberVal,
		Description:       descriptionVal,
		Group:             groupVal,
		JsPath:            jsPathVal,
		Kind:              kindVal,
		LastAcknowledged:  lastAcknowledgedVal,
		LastChanged:       lastChangedVal,
		LastSuppressed:    lastSuppressedVal,
		Name:              nameVal,
		Namespace:         namespaceVal,
		Occurrences:       occurrencesVal,
		ParentAlarms:      parentAlarmsVal,
		ProbableCause:     probableCauseVal,
		RemedialAction:    remedialActionVal,
		Resource:          resourceVal,
		Severity:          severityVal,
		SourceGroup:       sourceGroupVal,
		SourceKind:        sourceKindVal,
		SourceResource:    sourceResourceVal,
		Suppressed:        suppressedVal,
		SuppressedUntil:   suppressedUntilVal,
		AlarmType:         typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewAlarmValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AlarmValue {
	object, diags := NewAlarmValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAlarmValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AlarmType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAlarmValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAlarmValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAlarmValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAlarmValueMust(AlarmValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AlarmType) ValueType(ctx context.Context) attr.Value {
	return AlarmValue{}
}

var _ basetypes.ObjectValuable = AlarmValue{}

type AlarmValue struct {
	Acknowledged      basetypes.BoolValue   `tfsdk:"acknowledged"`
	AcknowledgedUntil basetypes.StringValue `tfsdk:"acknowledged_until"`
	Cleared           basetypes.BoolValue   `tfsdk:"cleared"`
	ClusterMember     basetypes.StringValue `tfsdk:"cluster_member"`
	Description       basetypes.StringValue `tfsdk:"description"`
	Group             basetypes.StringValue `tfsdk:"group"`
	JsPath            basetypes.StringValue `tfsdk:"js_path"`
	Kind              basetypes.StringValue `tfsdk:"kind"`
	LastAcknowledged  basetypes.StringValue `tfsdk:"last_acknowledged"`
	LastChanged       basetypes.StringValue `tfsdk:"last_changed"`
	LastSuppressed    basetypes.StringValue `tfsdk:"last_suppressed"`
	Name              basetypes.StringValue `tfsdk:"name"`
	Namespace         basetypes.StringValue `tfsdk:"namespace"`
	Occurrences       basetypes.Int64Value  `tfsdk:"occurrences"`
	ParentAlarms      basetypes.ListValue   `tfsdk:"parent_alarms"`
	ProbableCause     basetypes.StringValue `tfsdk:"probable_cause"`
	RemedialAction    basetypes.StringValue `tfsdk:"remedial_action"`
	Resource          basetypes.StringValue `tfsdk:"resource"`
	Severity          basetypes.StringValue `tfsdk:"severity"`
	SourceGroup       basetypes.StringValue `tfsdk:"source_group"`
	SourceKind        basetypes.StringValue `tfsdk:"source_kind"`
	SourceResource    basetypes.StringValue `tfsdk:"source_resource"`
	Suppressed        basetypes.BoolValue   `tfsdk:"suppressed"`
	SuppressedUntil   basetypes.StringValue `tfsdk:"suppressed_until"`
	AlarmType         basetypes.StringValue `tfsdk:"type"`
	state             attr.ValueState
}

func (v AlarmValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 25)

	var val tftypes.Value
	var err error

	attrTypes["acknowledged"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["acknowledged_until"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cleared"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["cluster_member"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["js_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_acknowledged"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_changed"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_suppressed"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["occurrences"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["parent_alarms"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["probable_cause"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["remedial_action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["severity"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source_group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source_kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source_resource"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["suppressed"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["suppressed_until"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 25)

		val, err = v.Acknowledged.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["acknowledged"] = val

		val, err = v.AcknowledgedUntil.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["acknowledged_until"] = val

		val, err = v.Cleared.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cleared"] = val

		val, err = v.ClusterMember.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cluster_member"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.JsPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["js_path"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.LastAcknowledged.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_acknowledged"] = val

		val, err = v.LastChanged.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_changed"] = val

		val, err = v.LastSuppressed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_suppressed"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		val, err = v.Occurrences.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["occurrences"] = val

		val, err = v.ParentAlarms.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parent_alarms"] = val

		val, err = v.ProbableCause.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["probable_cause"] = val

		val, err = v.RemedialAction.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["remedial_action"] = val

		val, err = v.Resource.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource"] = val

		val, err = v.Severity.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["severity"] = val

		val, err = v.SourceGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source_group"] = val

		val, err = v.SourceKind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source_kind"] = val

		val, err = v.SourceResource.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source_resource"] = val

		val, err = v.Suppressed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["suppressed"] = val

		val, err = v.SuppressedUntil.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["suppressed_until"] = val

		val, err = v.AlarmType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AlarmValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AlarmValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AlarmValue) String() string {
	return "AlarmValue"
}

func (v AlarmValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var parentAlarmsVal basetypes.ListValue
	switch {
	case v.ParentAlarms.IsUnknown():
		parentAlarmsVal = types.ListUnknown(types.StringType)
	case v.ParentAlarms.IsNull():
		parentAlarmsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		parentAlarmsVal, d = types.ListValue(types.StringType, v.ParentAlarms.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"acknowledged":       basetypes.BoolType{},
			"acknowledged_until": basetypes.StringType{},
			"cleared":            basetypes.BoolType{},
			"cluster_member":     basetypes.StringType{},
			"description":        basetypes.StringType{},
			"group":              basetypes.StringType{},
			"js_path":            basetypes.StringType{},
			"kind":               basetypes.StringType{},
			"last_acknowledged":  basetypes.StringType{},
			"last_changed":       basetypes.StringType{},
			"last_suppressed":    basetypes.StringType{},
			"name":               basetypes.StringType{},
			"namespace":          basetypes.StringType{},
			"occurrences":        basetypes.Int64Type{},
			"parent_alarms": basetypes.ListType{
				ElemType: types.StringType,
			},
			"probable_cause":   basetypes.StringType{},
			"remedial_action":  basetypes.StringType{},
			"resource":         basetypes.StringType{},
			"severity":         basetypes.StringType{},
			"source_group":     basetypes.StringType{},
			"source_kind":      basetypes.StringType{},
			"source_resource":  basetypes.StringType{},
			"suppressed":       basetypes.BoolType{},
			"suppressed_until": basetypes.StringType{},
			"type":             basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"acknowledged":       basetypes.BoolType{},
		"acknowledged_until": basetypes.StringType{},
		"cleared":            basetypes.BoolType{},
		"cluster_member":     basetypes.StringType{},
		"description":        basetypes.StringType{},
		"group":              basetypes.StringType{},
		"js_path":            basetypes.StringType{},
		"kind":               basetypes.StringType{},
		"last_acknowledged":  basetypes.StringType{},
		"last_changed":       basetypes.StringType{},
		"last_suppressed":    basetypes.StringType{},
		"name":               basetypes.StringType{},
		"namespace":          basetypes.StringType{},
		"occurrences":        basetypes.Int64Type{},
		"parent_alarms": basetypes.ListType{
			ElemType: types.StringType,
		},
		"probable_cause":   basetypes.StringType{},
		"remedial_action":  basetypes.StringType{},
		"resource":         basetypes.StringType{},
		"severity":         basetypes.StringType{},
		"source_group":     basetypes.StringType{},
		"source_kind":      basetypes.StringType{},
		"source_resource":  basetypes.StringType{},
		"suppressed":       basetypes.BoolType{},
		"suppressed_until": basetypes.StringType{},
		"type":             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"acknowledged":       v.Acknowledged,
			"acknowledged_until": v.AcknowledgedUntil,
			"cleared":            v.Cleared,
			"cluster_member":     v.ClusterMember,
			"description":        v.Description,
			"group":              v.Group,
			"js_path":            v.JsPath,
			"kind":               v.Kind,
			"last_acknowledged":  v.LastAcknowledged,
			"last_changed":       v.LastChanged,
			"last_suppressed":    v.LastSuppressed,
			"name":               v.Name,
			"namespace":          v.Namespace,
			"occurrences":        v.Occurrences,
			"parent_alarms":      parentAlarmsVal,
			"probable_cause":     v.ProbableCause,
			"remedial_action":    v.RemedialAction,
			"resource":           v.Resource,
			"severity":           v.Severity,
			"source_group":       v.SourceGroup,
			"source_kind":        v.SourceKind,
			"source_resource":    v.SourceResource,
			"suppressed":         v.Suppressed,
			"suppressed_until":   v.SuppressedUntil,
			"type":               v.AlarmType,
		})

	return objVal, diags
}

func (v AlarmValue) Equal(o attr.Value) bool {
	other, ok := o.(AlarmValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Acknowledged.Equal(other.Acknowledged) {
		return false
	}

	if !v.AcknowledgedUntil.Equal(other.AcknowledgedUntil) {
		return false
	}

	if !v.Cleared.Equal(other.Cleared) {
		return false
	}

	if !v.ClusterMember.Equal(other.ClusterMember) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.JsPath.Equal(other.JsPath) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.LastAcknowledged.Equal(other.LastAcknowledged) {
		return false
	}

	if !v.LastChanged.Equal(other.LastChanged) {
		return false
	}

	if !v.LastSuppressed.Equal(other.LastSuppressed) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	if !v.Occurrences.Equal(other.Occurrences) {
		return false
	}

	if !v.ParentAlarms.Equal(other.ParentAlarms) {
		return false
	}

	if !v.ProbableCause.Equal(other.ProbableCause) {
		return false
	}

	if !v.RemedialAction.Equal(other.RemedialAction) {
		return false
	}

	if !v.Resource.Equal(other.Resource) {
		return false
	}

	if !v.Severity.Equal(other.Severity) {
		return false
	}

	if !v.SourceGroup.Equal(other.SourceGroup) {
		return false
	}

	if !v.SourceKind.Equal(other.SourceKind) {
		return false
	}

	if !v.SourceResource.Equal(other.SourceResource) {
		return false
	}

	if !v.Suppressed.Equal(other.Suppressed) {
		return false
	}

	if !v.SuppressedUntil.Equal(other.SuppressedUntil) {
		return false
	}

	if !v.AlarmType.Equal(other.AlarmType) {
		return false
	}

	return true
}

func (v AlarmValue) Type(ctx context.Context) attr.Type {
	return AlarmType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AlarmValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"acknowledged":       basetypes.BoolType{},
		"acknowledged_until": basetypes.StringType{},
		"cleared":            basetypes.BoolType{},
		"cluster_member":     basetypes.StringType{},
		"description":        basetypes.StringType{},
		"group":              basetypes.StringType{},
		"js_path":            basetypes.StringType{},
		"kind":               basetypes.StringType{},
		"last_acknowledged":  basetypes.StringType{},
		"last_changed":       basetypes.StringType{},
		"last_suppressed":    basetypes.StringType{},
		"name":               basetypes.StringType{},
		"namespace":          basetypes.StringType{},
		"occurrences":        basetypes.Int64Type{},
		"parent_alarms": basetypes.ListType{
			ElemType: types.StringType,
		},
		"probable_cause":   basetypes.StringType{},
		"remedial_action":  basetypes.StringType{},
		"resource":         basetypes.StringType{},
		"severity":         basetypes.StringType{},
		"source_group":     basetypes.StringType{},
		"source_kind":      basetypes.StringType{},
		"source_resource":  basetypes.StringType{},
		"suppressed":       basetypes.BoolType{},
		"suppressed_until": basetypes.StringType{},
		"type":             basetypes.StringType{},
	}
}
