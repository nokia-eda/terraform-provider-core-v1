// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_transaction_input_resource

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TransactionInputResourceDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"input_crs": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"is_delete": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"gvk": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"group": schema.StringAttribute{
											Computed:            true,
											Description:         "Name of the API group",
											MarkdownDescription: "Name of the API group",
										},
										"kind": schema.StringAttribute{
											Computed:            true,
											Description:         "The Kind of the resource",
											MarkdownDescription: "The Kind of the resource",
										},
										"version": schema.StringAttribute{
											Computed:            true,
											Description:         "Version of the API group",
											MarkdownDescription: "Version of the API group",
										},
									},
									CustomType: GvkType{
										ObjectType: types.ObjectType{
											AttrTypes: GvkValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"namespace": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: NameType{
								ObjectType: types.ObjectType{
									AttrTypes: NameValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
					},
					CustomType: InputCrsType{
						ObjectType: types.ObjectType{
							AttrTypes: InputCrsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of input resources from the transaction",
				MarkdownDescription: "List of input resources from the transaction",
			},
			"limited_access": schema.BoolAttribute{
				Computed:            true,
				Description:         "This field is true if the list returned here is not the complete list of input resources in the transaction because the user does not have read-access to some of them",
				MarkdownDescription: "This field is true if the list returned here is not the complete list of input resources in the transaction because the user does not have read-access to some of them",
			},
			"transaction_id": schema.Int64Attribute{
				Required:            true,
				Description:         "The identifier for the transaction whose list of input resources is being requested",
				MarkdownDescription: "The identifier for the transaction whose list of input resources is being requested",
			},
		},
	}
}

type TransactionInputResourceModel struct {
	InputCrs      types.List  `tfsdk:"input_crs"`
	LimitedAccess types.Bool  `tfsdk:"limited_access"`
	TransactionId types.Int64 `tfsdk:"transaction_id"`
}

var _ basetypes.ObjectTypable = InputCrsType{}

type InputCrsType struct {
	basetypes.ObjectType
}

func (t InputCrsType) Equal(o attr.Type) bool {
	other, ok := o.(InputCrsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InputCrsType) String() string {
	return "InputCrsType"
}

func (t InputCrsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isDeleteAttribute, ok := attributes["is_delete"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_delete is missing from object`)

		return nil, diags
	}

	isDeleteVal, ok := isDeleteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_delete expected to be basetypes.BoolValue, was: %T`, isDeleteAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.ObjectValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InputCrsValue{
		IsDelete: isDeleteVal,
		Name:     nameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewInputCrsValueNull() InputCrsValue {
	return InputCrsValue{
		state: attr.ValueStateNull,
	}
}

func NewInputCrsValueUnknown() InputCrsValue {
	return InputCrsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInputCrsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InputCrsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InputCrsValue Attribute Value",
				"While creating a InputCrsValue value, a missing attribute value was detected. "+
					"A InputCrsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InputCrsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InputCrsValue Attribute Type",
				"While creating a InputCrsValue value, an invalid attribute value was detected. "+
					"A InputCrsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InputCrsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InputCrsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InputCrsValue Attribute Value",
				"While creating a InputCrsValue value, an extra attribute value was detected. "+
					"A InputCrsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InputCrsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInputCrsValueUnknown(), diags
	}

	isDeleteAttribute, ok := attributes["is_delete"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_delete is missing from object`)

		return NewInputCrsValueUnknown(), diags
	}

	isDeleteVal, ok := isDeleteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_delete expected to be basetypes.BoolValue, was: %T`, isDeleteAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewInputCrsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.ObjectValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewInputCrsValueUnknown(), diags
	}

	return InputCrsValue{
		IsDelete: isDeleteVal,
		Name:     nameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewInputCrsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InputCrsValue {
	object, diags := NewInputCrsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInputCrsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InputCrsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInputCrsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInputCrsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInputCrsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInputCrsValueMust(InputCrsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InputCrsType) ValueType(ctx context.Context) attr.Value {
	return InputCrsValue{}
}

var _ basetypes.ObjectValuable = InputCrsValue{}

type InputCrsValue struct {
	IsDelete basetypes.BoolValue   `tfsdk:"is_delete"`
	Name     basetypes.ObjectValue `tfsdk:"name"`
	state    attr.ValueState
}

func (v InputCrsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["is_delete"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.ObjectType{
		AttrTypes: NameValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.IsDelete.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_delete"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InputCrsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InputCrsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InputCrsValue) String() string {
	return "InputCrsValue"
}

func (v InputCrsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name basetypes.ObjectValue

	if v.Name.IsNull() {
		name = types.ObjectNull(
			NameValue{}.AttributeTypes(ctx),
		)
	}

	if v.Name.IsUnknown() {
		name = types.ObjectUnknown(
			NameValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Name.IsNull() && !v.Name.IsUnknown() {
		name = types.ObjectValueMust(
			NameValue{}.AttributeTypes(ctx),
			v.Name.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"is_delete": basetypes.BoolType{},
		"name": basetypes.ObjectType{
			AttrTypes: NameValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"is_delete": v.IsDelete,
			"name":      name,
		})

	return objVal, diags
}

func (v InputCrsValue) Equal(o attr.Value) bool {
	other, ok := o.(InputCrsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsDelete.Equal(other.IsDelete) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v InputCrsValue) Type(ctx context.Context) attr.Type {
	return InputCrsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InputCrsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_delete": basetypes.BoolType{},
		"name": basetypes.ObjectType{
			AttrTypes: NameValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = NameType{}

type NameType struct {
	basetypes.ObjectType
}

func (t NameType) Equal(o attr.Type) bool {
	other, ok := o.(NameType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NameType) String() string {
	return "NameType"
}

func (t NameType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	gvkAttribute, ok := attributes["gvk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gvk is missing from object`)

		return nil, diags
	}

	gvkVal, ok := gvkAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gvk expected to be basetypes.ObjectValue, was: %T`, gvkAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NameValue{
		Gvk:       gvkVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewNameValueNull() NameValue {
	return NameValue{
		state: attr.ValueStateNull,
	}
}

func NewNameValueUnknown() NameValue {
	return NameValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNameValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NameValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NameValue Attribute Value",
				"While creating a NameValue value, a missing attribute value was detected. "+
					"A NameValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NameValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NameValue Attribute Type",
				"While creating a NameValue value, an invalid attribute value was detected. "+
					"A NameValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NameValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NameValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NameValue Attribute Value",
				"While creating a NameValue value, an extra attribute value was detected. "+
					"A NameValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NameValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNameValueUnknown(), diags
	}

	gvkAttribute, ok := attributes["gvk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gvk is missing from object`)

		return NewNameValueUnknown(), diags
	}

	gvkVal, ok := gvkAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gvk expected to be basetypes.ObjectValue, was: %T`, gvkAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewNameValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewNameValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewNameValueUnknown(), diags
	}

	return NameValue{
		Gvk:       gvkVal,
		Name:      nameVal,
		Namespace: namespaceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewNameValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NameValue {
	object, diags := NewNameValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNameValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NameType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNameValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNameValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNameValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNameValueMust(NameValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NameType) ValueType(ctx context.Context) attr.Value {
	return NameValue{}
}

var _ basetypes.ObjectValuable = NameValue{}

type NameValue struct {
	Gvk       basetypes.ObjectValue `tfsdk:"gvk"`
	Name      basetypes.StringValue `tfsdk:"name"`
	Namespace basetypes.StringValue `tfsdk:"namespace"`
	state     attr.ValueState
}

func (v NameValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["gvk"] = basetypes.ObjectType{
		AttrTypes: GvkValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Gvk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gvk"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NameValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NameValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NameValue) String() string {
	return "NameValue"
}

func (v NameValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gvk basetypes.ObjectValue

	if v.Gvk.IsNull() {
		gvk = types.ObjectNull(
			GvkValue{}.AttributeTypes(ctx),
		)
	}

	if v.Gvk.IsUnknown() {
		gvk = types.ObjectUnknown(
			GvkValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Gvk.IsNull() && !v.Gvk.IsUnknown() {
		gvk = types.ObjectValueMust(
			GvkValue{}.AttributeTypes(ctx),
			v.Gvk.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"gvk": basetypes.ObjectType{
			AttrTypes: GvkValue{}.AttributeTypes(ctx),
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"gvk":       gvk,
			"name":      v.Name,
			"namespace": v.Namespace,
		})

	return objVal, diags
}

func (v NameValue) Equal(o attr.Value) bool {
	other, ok := o.(NameValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Gvk.Equal(other.Gvk) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v NameValue) Type(ctx context.Context) attr.Type {
	return NameType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NameValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"gvk": basetypes.ObjectType{
			AttrTypes: GvkValue{}.AttributeTypes(ctx),
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GvkType{}

type GvkType struct {
	basetypes.ObjectType
}

func (t GvkType) Equal(o attr.Type) bool {
	other, ok := o.(GvkType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GvkType) String() string {
	return "GvkType"
}

func (t GvkType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GvkValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGvkValueNull() GvkValue {
	return GvkValue{
		state: attr.ValueStateNull,
	}
}

func NewGvkValueUnknown() GvkValue {
	return GvkValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGvkValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GvkValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GvkValue Attribute Value",
				"While creating a GvkValue value, a missing attribute value was detected. "+
					"A GvkValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GvkValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GvkValue Attribute Type",
				"While creating a GvkValue value, an invalid attribute value was detected. "+
					"A GvkValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GvkValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GvkValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GvkValue Attribute Value",
				"While creating a GvkValue value, an extra attribute value was detected. "+
					"A GvkValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GvkValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGvkValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewGvkValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewGvkValueUnknown(), diags
	}

	return GvkValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGvkValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GvkValue {
	object, diags := NewGvkValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGvkValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GvkType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGvkValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGvkValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGvkValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGvkValueMust(GvkValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GvkType) ValueType(ctx context.Context) attr.Value {
	return GvkValue{}
}

var _ basetypes.ObjectValuable = GvkValue{}

type GvkValue struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v GvkValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GvkValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GvkValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GvkValue) String() string {
	return "GvkValue"
}

func (v GvkValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v GvkValue) Equal(o attr.Value) bool {
	other, ok := o.(GvkValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v GvkValue) Type(ctx context.Context) attr.Type {
	return GvkType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GvkValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}
