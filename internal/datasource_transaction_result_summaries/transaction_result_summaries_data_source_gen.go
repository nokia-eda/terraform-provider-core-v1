// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_transaction_result_summaries

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TransactionResultSummariesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"results": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"commit_hash": schema.StringAttribute{
							Computed:            true,
							Description:         "The git commit hash for the transaction",
							MarkdownDescription: "The git commit hash for the transaction",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the transaction, as posted in the transaction request.",
							MarkdownDescription: "The description of the transaction, as posted in the transaction request.",
						},
						"details": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of details available for the transaction, as posted in the transaction request.",
							MarkdownDescription: "The type of details available for the transaction, as posted in the transaction request.",
						},
						"dry_run": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true the transaction was not committed and ran in dry run mode.",
							MarkdownDescription: "If true the transaction was not committed and ran in dry run mode.",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The transaction identifier",
							MarkdownDescription: "The transaction identifier",
						},
						"last_change_timestamp": schema.StringAttribute{
							Computed:            true,
							Description:         "The time that the transaction completed.",
							MarkdownDescription: "The time that the transaction completed.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the transaction.",
							MarkdownDescription: "The state of the transaction.",
						},
						"success": schema.BoolAttribute{
							Computed:            true,
							Description:         "True if the transaction was successful.",
							MarkdownDescription: "True if the transaction was successful.",
						},
						"username": schema.StringAttribute{
							Computed:            true,
							Description:         "The user who posted the transaction.",
							MarkdownDescription: "The user who posted the transaction.",
						},
					},
					CustomType: ResultsType{
						ObjectType: types.ObjectType{
							AttrTypes: ResultsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "array of summary-results for transactions",
				MarkdownDescription: "array of summary-results for transactions",
			},
			"size": schema.Int64Attribute{
				Required:            true,
				Description:         "Maximum number of transaction results to return",
				MarkdownDescription: "Maximum number of transaction results to return",
			},
			"username": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "When provided, the liast of transactions is limited to those initiated by the specified user.",
				MarkdownDescription: "When provided, the liast of transactions is limited to those initiated by the specified user.",
			},
		},
	}
}

type TransactionResultSummariesModel struct {
	Results  types.List   `tfsdk:"results"`
	Size     types.Int64  `tfsdk:"size"`
	Username types.String `tfsdk:"username"`
}

var _ basetypes.ObjectTypable = ResultsType{}

type ResultsType struct {
	basetypes.ObjectType
}

func (t ResultsType) Equal(o attr.Type) bool {
	other, ok := o.(ResultsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResultsType) String() string {
	return "ResultsType"
}

func (t ResultsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return nil, diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	detailsAttribute, ok := attributes["details"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`details is missing from object`)

		return nil, diags
	}

	detailsVal, ok := detailsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`details expected to be basetypes.StringValue, was: %T`, detailsAttribute))
	}

	dryRunAttribute, ok := attributes["dry_run"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dry_run is missing from object`)

		return nil, diags
	}

	dryRunVal, ok := dryRunAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dry_run expected to be basetypes.BoolValue, was: %T`, dryRunAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	lastChangeTimestampAttribute, ok := attributes["last_change_timestamp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change_timestamp is missing from object`)

		return nil, diags
	}

	lastChangeTimestampVal, ok := lastChangeTimestampAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change_timestamp expected to be basetypes.StringValue, was: %T`, lastChangeTimestampAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	successAttribute, ok := attributes["success"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`success is missing from object`)

		return nil, diags
	}

	successVal, ok := successAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`success expected to be basetypes.BoolValue, was: %T`, successAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResultsValue{
		CommitHash:          commitHashVal,
		Description:         descriptionVal,
		Details:             detailsVal,
		DryRun:              dryRunVal,
		Id:                  idVal,
		LastChangeTimestamp: lastChangeTimestampVal,
		State:               stateVal,
		Success:             successVal,
		Username:            usernameVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewResultsValueNull() ResultsValue {
	return ResultsValue{
		state: attr.ValueStateNull,
	}
}

func NewResultsValueUnknown() ResultsValue {
	return ResultsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResultsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResultsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResultsValue Attribute Value",
				"While creating a ResultsValue value, a missing attribute value was detected. "+
					"A ResultsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResultsValue Attribute Type",
				"While creating a ResultsValue value, an invalid attribute value was detected. "+
					"A ResultsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResultsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResultsValue Attribute Value",
				"While creating a ResultsValue value, an extra attribute value was detected. "+
					"A ResultsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResultsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResultsValueUnknown(), diags
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	detailsAttribute, ok := attributes["details"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`details is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	detailsVal, ok := detailsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`details expected to be basetypes.StringValue, was: %T`, detailsAttribute))
	}

	dryRunAttribute, ok := attributes["dry_run"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dry_run is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	dryRunVal, ok := dryRunAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dry_run expected to be basetypes.BoolValue, was: %T`, dryRunAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	lastChangeTimestampAttribute, ok := attributes["last_change_timestamp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change_timestamp is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	lastChangeTimestampVal, ok := lastChangeTimestampAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change_timestamp expected to be basetypes.StringValue, was: %T`, lastChangeTimestampAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	successAttribute, ok := attributes["success"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`success is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	successVal, ok := successAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`success expected to be basetypes.BoolValue, was: %T`, successAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewResultsValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewResultsValueUnknown(), diags
	}

	return ResultsValue{
		CommitHash:          commitHashVal,
		Description:         descriptionVal,
		Details:             detailsVal,
		DryRun:              dryRunVal,
		Id:                  idVal,
		LastChangeTimestamp: lastChangeTimestampVal,
		State:               stateVal,
		Success:             successVal,
		Username:            usernameVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewResultsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResultsValue {
	object, diags := NewResultsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResultsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResultsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResultsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResultsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResultsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResultsValueMust(ResultsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResultsType) ValueType(ctx context.Context) attr.Value {
	return ResultsValue{}
}

var _ basetypes.ObjectValuable = ResultsValue{}

type ResultsValue struct {
	CommitHash          basetypes.StringValue `tfsdk:"commit_hash"`
	Description         basetypes.StringValue `tfsdk:"description"`
	Details             basetypes.StringValue `tfsdk:"details"`
	DryRun              basetypes.BoolValue   `tfsdk:"dry_run"`
	Id                  basetypes.Int64Value  `tfsdk:"id"`
	LastChangeTimestamp basetypes.StringValue `tfsdk:"last_change_timestamp"`
	State               basetypes.StringValue `tfsdk:"state"`
	Success             basetypes.BoolValue   `tfsdk:"success"`
	Username            basetypes.StringValue `tfsdk:"username"`
	state               attr.ValueState
}

func (v ResultsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["commit_hash"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["details"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dry_run"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["last_change_timestamp"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["success"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CommitHash.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["commit_hash"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Details.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["details"] = val

		val, err = v.DryRun.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dry_run"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.LastChangeTimestamp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_change_timestamp"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.Success.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["success"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResultsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResultsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResultsValue) String() string {
	return "ResultsValue"
}

func (v ResultsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"commit_hash":           basetypes.StringType{},
		"description":           basetypes.StringType{},
		"details":               basetypes.StringType{},
		"dry_run":               basetypes.BoolType{},
		"id":                    basetypes.Int64Type{},
		"last_change_timestamp": basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"success":               basetypes.BoolType{},
		"username":              basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"commit_hash":           v.CommitHash,
			"description":           v.Description,
			"details":               v.Details,
			"dry_run":               v.DryRun,
			"id":                    v.Id,
			"last_change_timestamp": v.LastChangeTimestamp,
			"state":                 v.State,
			"success":               v.Success,
			"username":              v.Username,
		})

	return objVal, diags
}

func (v ResultsValue) Equal(o attr.Value) bool {
	other, ok := o.(ResultsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CommitHash.Equal(other.CommitHash) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Details.Equal(other.Details) {
		return false
	}

	if !v.DryRun.Equal(other.DryRun) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.LastChangeTimestamp.Equal(other.LastChangeTimestamp) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.Success.Equal(other.Success) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v ResultsValue) Type(ctx context.Context) attr.Type {
	return ResultsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResultsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"commit_hash":           basetypes.StringType{},
		"description":           basetypes.StringType{},
		"details":               basetypes.StringType{},
		"dry_run":               basetypes.BoolType{},
		"id":                    basetypes.Int64Type{},
		"last_change_timestamp": basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"success":               basetypes.BoolType{},
		"username":              basetypes.StringType{},
	}
}
