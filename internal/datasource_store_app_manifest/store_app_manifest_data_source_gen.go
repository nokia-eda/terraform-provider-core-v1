// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_store_app_manifest

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StoreAppManifestDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required:            true,
				Description:         "application ID of the application version",
				MarkdownDescription: "application ID of the application version",
			},
			"catalog": schema.StringAttribute{
				Required:            true,
				Description:         "The catalog where the application version resides",
				MarkdownDescription: "The catalog where the application version resides",
			},
			"commit_hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The commit hash for the application version.",
				MarkdownDescription: "The commit hash for the application version.",
			},
			"manifest": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
					CustomType: ManifestType{
						ObjectType: types.ObjectType{
							AttrTypes: ManifestValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The application manifest as JSON",
				MarkdownDescription: "The application manifest as JSON",
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"published_time": schema.StringAttribute{
						Computed:            true,
						Description:         "The date and time when the application version was published.",
						MarkdownDescription: "The date and time when the application version was published.",
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"sem_ver": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The semantic version for the application version.",
				MarkdownDescription: "The semantic version for the application version.",
			},
			"version": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"app_id": schema.StringAttribute{
						Computed:            true,
						Description:         "The identifier for the application",
						MarkdownDescription: "The identifier for the application",
					},
					"catalog": schema.StringAttribute{
						Computed:            true,
						Description:         "The catalog in which this application version was found",
						MarkdownDescription: "The catalog in which this application version was found",
					},
					"commit_hash": schema.StringAttribute{
						Computed:            true,
						Description:         "The commit hash for the application version.",
						MarkdownDescription: "The commit hash for the application version.",
					},
					"sem_ver": schema.StringAttribute{
						Computed:            true,
						Description:         "The semantic version for the application version.",
						MarkdownDescription: "The semantic version for the application version.",
					},
				},
				CustomType: VersionType{
					ObjectType: types.ObjectType{
						AttrTypes: VersionValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "The information about an application version available from a catalog.\nAt least one of \"semVer\" or \"commitHash\" must/will be defined.",
				MarkdownDescription: "The information about an application version available from a catalog.\nAt least one of \"semVer\" or \"commitHash\" must/will be defined.",
			},
		},
	}
}

type StoreAppManifestModel struct {
	AppId      types.String  `tfsdk:"app_id"`
	Catalog    types.String  `tfsdk:"catalog"`
	CommitHash types.String  `tfsdk:"commit_hash"`
	Manifest   types.Map     `tfsdk:"manifest"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	SemVer     types.String  `tfsdk:"sem_ver"`
	Version    VersionValue  `tfsdk:"version"`
}

var _ basetypes.ObjectTypable = ManifestType{}

type ManifestType struct {
	basetypes.ObjectType
}

func (t ManifestType) Equal(o attr.Type) bool {
	other, ok := o.(ManifestType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ManifestType) String() string {
	return "ManifestType"
}

func (t ManifestType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return ManifestValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewManifestValueNull() ManifestValue {
	return ManifestValue{
		state: attr.ValueStateNull,
	}
}

func NewManifestValueUnknown() ManifestValue {
	return ManifestValue{
		state: attr.ValueStateUnknown,
	}
}

func NewManifestValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ManifestValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ManifestValue Attribute Value",
				"While creating a ManifestValue value, a missing attribute value was detected. "+
					"A ManifestValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ManifestValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ManifestValue Attribute Type",
				"While creating a ManifestValue value, an invalid attribute value was detected. "+
					"A ManifestValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ManifestValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ManifestValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ManifestValue Attribute Value",
				"While creating a ManifestValue value, an extra attribute value was detected. "+
					"A ManifestValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ManifestValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewManifestValueUnknown(), diags
	}

	if diags.HasError() {
		return NewManifestValueUnknown(), diags
	}

	return ManifestValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewManifestValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ManifestValue {
	object, diags := NewManifestValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewManifestValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ManifestType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewManifestValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewManifestValueUnknown(), nil
	}

	if in.IsNull() {
		return NewManifestValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewManifestValueMust(ManifestValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ManifestType) ValueType(ctx context.Context) attr.Value {
	return ManifestValue{}
}

var _ basetypes.ObjectValuable = ManifestValue{}

type ManifestValue struct {
	state attr.ValueState
}

func (v ManifestValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ManifestValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ManifestValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ManifestValue) String() string {
	return "ManifestValue"
}

func (v ManifestValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v ManifestValue) Equal(o attr.Value) bool {
	other, ok := o.(ManifestValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v ManifestValue) Type(ctx context.Context) attr.Type {
	return ManifestType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ManifestValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	publishedTimeAttribute, ok := attributes["published_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`published_time is missing from object`)

		return nil, diags
	}

	publishedTimeVal, ok := publishedTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`published_time expected to be basetypes.StringValue, was: %T`, publishedTimeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		PublishedTime: publishedTimeVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	publishedTimeAttribute, ok := attributes["published_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`published_time is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	publishedTimeVal, ok := publishedTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`published_time expected to be basetypes.StringValue, was: %T`, publishedTimeAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		PublishedTime: publishedTimeVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	PublishedTime basetypes.StringValue `tfsdk:"published_time"`
	state         attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["published_time"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.PublishedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["published_time"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"published_time": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"published_time": v.PublishedTime,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.PublishedTime.Equal(other.PublishedTime) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"published_time": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = VersionType{}

type VersionType struct {
	basetypes.ObjectType
}

func (t VersionType) Equal(o attr.Type) bool {
	other, ok := o.(VersionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VersionType) String() string {
	return "VersionType"
}

func (t VersionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return nil, diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return nil, diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return nil, diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVersionValueNull() VersionValue {
	return VersionValue{
		state: attr.ValueStateNull,
	}
}

func NewVersionValueUnknown() VersionValue {
	return VersionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVersionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VersionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VersionValue Attribute Value",
				"While creating a VersionValue value, a missing attribute value was detected. "+
					"A VersionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VersionValue Attribute Type",
				"While creating a VersionValue value, an invalid attribute value was detected. "+
					"A VersionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VersionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VersionValue Attribute Value",
				"While creating a VersionValue value, an extra attribute value was detected. "+
					"A VersionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VersionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVersionValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return NewVersionValueUnknown(), diags
	}

	return VersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVersionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VersionValue {
	object, diags := NewVersionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVersionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VersionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVersionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVersionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVersionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVersionValueMust(VersionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VersionType) ValueType(ctx context.Context) attr.Value {
	return VersionValue{}
}

var _ basetypes.ObjectValuable = VersionValue{}

type VersionValue struct {
	AppId      basetypes.StringValue `tfsdk:"app_id"`
	Catalog    basetypes.StringValue `tfsdk:"catalog"`
	CommitHash basetypes.StringValue `tfsdk:"commit_hash"`
	SemVer     basetypes.StringValue `tfsdk:"sem_ver"`
	state      attr.ValueState
}

func (v VersionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["catalog"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["commit_hash"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sem_ver"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.Catalog.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["catalog"] = val

		val, err = v.CommitHash.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["commit_hash"] = val

		val, err = v.SemVer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sem_ver"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VersionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VersionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VersionValue) String() string {
	return "VersionValue"
}

func (v VersionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":      v.AppId,
			"catalog":     v.Catalog,
			"commit_hash": v.CommitHash,
			"sem_ver":     v.SemVer,
		})

	return objVal, diags
}

func (v VersionValue) Equal(o attr.Value) bool {
	other, ok := o.(VersionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.Catalog.Equal(other.Catalog) {
		return false
	}

	if !v.CommitHash.Equal(other.CommitHash) {
		return false
	}

	if !v.SemVer.Equal(other.SemVer) {
		return false
	}

	return true
}

func (v VersionValue) Type(ctx context.Context) attr.Type {
	return VersionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VersionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}
}
