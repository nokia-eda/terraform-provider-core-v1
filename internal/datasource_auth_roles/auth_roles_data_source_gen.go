// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_auth_roles

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AuthRolesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_roles": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"namespace": schema.StringAttribute{
							Computed: true,
						},
						"resource_rules": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"api_groups": schema.ListAttribute{
										ElementType:         types.StringType,
										Computed:            true,
										Description:         "The API groups for the resources controlled by the rule.\nAn API group consists of an apiGroup and a version, e.g. \"apigroup/version\".\nThe API group can be a wildcard (\"*\"), in which case it will match any API group.\nIn addition, the version can be a wildcard.",
										MarkdownDescription: "The API groups for the resources controlled by the rule.\nAn API group consists of an apiGroup and a version, e.g. \"apigroup/version\".\nThe API group can be a wildcard (\"*\"), in which case it will match any API group.\nIn addition, the version can be a wildcard.",
									},
									"permissions": schema.StringAttribute{
										Computed:            true,
										Description:         "Permissions for resources specified by the rule.",
										MarkdownDescription: "Permissions for resources specified by the rule.",
									},
									"resources": schema.ListAttribute{
										ElementType:         types.StringType,
										Computed:            true,
										Description:         "Names for the resources controlled by the rule.\nIt can be a wildcard (\"*\"), in which case it will match any resource\nin the matching API groups.",
										MarkdownDescription: "Names for the resources controlled by the rule.\nIt can be a wildcard (\"*\"), in which case it will match any resource\nin the matching API groups.",
									},
								},
								CustomType: ResourceRulesType{
									ObjectType: types.ObjectType{
										AttrTypes: ResourceRulesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Rules for access to resources.",
							MarkdownDescription: "Rules for access to resources.",
						},
						"table_rules": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"path": schema.StringAttribute{
										Computed:            true,
										Description:         "EDB path to which this rule applies. It can end in \".*\"\nin which case the final portion of the table path can be anything, if the\nprefix matches. It can end in \".**\" in which case the table path can be\nanything if the prefix matches.",
										MarkdownDescription: "EDB path to which this rule applies. It can end in \".*\"\nin which case the final portion of the table path can be anything, if the\nprefix matches. It can end in \".**\" in which case the table path can be\nanything if the prefix matches.",
									},
									"permissions": schema.StringAttribute{
										Computed:            true,
										Description:         "Permissions for the given EDB path.",
										MarkdownDescription: "Permissions for the given EDB path.",
									},
								},
								CustomType: TableRulesType{
									ObjectType: types.ObjectType{
										AttrTypes: TableRulesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Rules for access to EDB tables, including via EQL.",
							MarkdownDescription: "Rules for access to EDB tables, including via EQL.",
						},
						"url_rules": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"path": schema.StringAttribute{
										Computed:            true,
										Description:         "The API server URL path to which this rule applies. It can end in \"/*\"\nin which case the final portion of the URL path can be anything, if the\nprefix matches. It can end in \"/**\" in which case the URL path can be\nanything if the prefix matches.\",",
										MarkdownDescription: "The API server URL path to which this rule applies. It can end in \"/*\"\nin which case the final portion of the URL path can be anything, if the\nprefix matches. It can end in \"/**\" in which case the URL path can be\nanything if the prefix matches.\",",
									},
									"permissions": schema.StringAttribute{
										Computed:            true,
										Description:         "The permissions for the API server URL for the rule.",
										MarkdownDescription: "The permissions for the API server URL for the rule.",
									},
								},
								CustomType: UrlRulesType{
									ObjectType: types.ObjectType{
										AttrTypes: UrlRulesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Rules for access to APIServer routes.",
							MarkdownDescription: "Rules for access to APIServer routes.",
						},
					},
					CustomType: AuthRolesType{
						ObjectType: types.ObjectType{
							AttrTypes: AuthRolesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "namespace whose roles should be retrieved",
				MarkdownDescription: "namespace whose roles should be retrieved",
			},
		},
	}
}

type AuthRolesModel struct {
	AuthRoles types.Set    `tfsdk:"auth_roles"`
	Namespace types.String `tfsdk:"namespace"`
}

var _ basetypes.ObjectTypable = AuthRolesType{}

type AuthRolesType struct {
	basetypes.ObjectType
}

func (t AuthRolesType) Equal(o attr.Type) bool {
	other, ok := o.(AuthRolesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuthRolesType) String() string {
	return "AuthRolesType"
}

func (t AuthRolesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	resourceRulesAttribute, ok := attributes["resource_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_rules is missing from object`)

		return nil, diags
	}

	resourceRulesVal, ok := resourceRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_rules expected to be basetypes.ListValue, was: %T`, resourceRulesAttribute))
	}

	tableRulesAttribute, ok := attributes["table_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table_rules is missing from object`)

		return nil, diags
	}

	tableRulesVal, ok := tableRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table_rules expected to be basetypes.ListValue, was: %T`, tableRulesAttribute))
	}

	urlRulesAttribute, ok := attributes["url_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_rules is missing from object`)

		return nil, diags
	}

	urlRulesVal, ok := urlRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_rules expected to be basetypes.ListValue, was: %T`, urlRulesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuthRolesValue{
		Description:   descriptionVal,
		Name:          nameVal,
		Namespace:     namespaceVal,
		ResourceRules: resourceRulesVal,
		TableRules:    tableRulesVal,
		UrlRules:      urlRulesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAuthRolesValueNull() AuthRolesValue {
	return AuthRolesValue{
		state: attr.ValueStateNull,
	}
}

func NewAuthRolesValueUnknown() AuthRolesValue {
	return AuthRolesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuthRolesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuthRolesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuthRolesValue Attribute Value",
				"While creating a AuthRolesValue value, a missing attribute value was detected. "+
					"A AuthRolesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthRolesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuthRolesValue Attribute Type",
				"While creating a AuthRolesValue value, an invalid attribute value was detected. "+
					"A AuthRolesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthRolesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuthRolesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuthRolesValue Attribute Value",
				"While creating a AuthRolesValue value, an extra attribute value was detected. "+
					"A AuthRolesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuthRolesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuthRolesValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	resourceRulesAttribute, ok := attributes["resource_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_rules is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	resourceRulesVal, ok := resourceRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_rules expected to be basetypes.ListValue, was: %T`, resourceRulesAttribute))
	}

	tableRulesAttribute, ok := attributes["table_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table_rules is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	tableRulesVal, ok := tableRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table_rules expected to be basetypes.ListValue, was: %T`, tableRulesAttribute))
	}

	urlRulesAttribute, ok := attributes["url_rules"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_rules is missing from object`)

		return NewAuthRolesValueUnknown(), diags
	}

	urlRulesVal, ok := urlRulesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_rules expected to be basetypes.ListValue, was: %T`, urlRulesAttribute))
	}

	if diags.HasError() {
		return NewAuthRolesValueUnknown(), diags
	}

	return AuthRolesValue{
		Description:   descriptionVal,
		Name:          nameVal,
		Namespace:     namespaceVal,
		ResourceRules: resourceRulesVal,
		TableRules:    tableRulesVal,
		UrlRules:      urlRulesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAuthRolesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuthRolesValue {
	object, diags := NewAuthRolesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuthRolesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuthRolesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuthRolesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuthRolesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuthRolesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuthRolesValueMust(AuthRolesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuthRolesType) ValueType(ctx context.Context) attr.Value {
	return AuthRolesValue{}
}

var _ basetypes.ObjectValuable = AuthRolesValue{}

type AuthRolesValue struct {
	Description   basetypes.StringValue `tfsdk:"description"`
	Name          basetypes.StringValue `tfsdk:"name"`
	Namespace     basetypes.StringValue `tfsdk:"namespace"`
	ResourceRules basetypes.ListValue   `tfsdk:"resource_rules"`
	TableRules    basetypes.ListValue   `tfsdk:"table_rules"`
	UrlRules      basetypes.ListValue   `tfsdk:"url_rules"`
	state         attr.ValueState
}

func (v AuthRolesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_rules"] = basetypes.ListType{
		ElemType: ResourceRulesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["table_rules"] = basetypes.ListType{
		ElemType: TableRulesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["url_rules"] = basetypes.ListType{
		ElemType: UrlRulesValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		val, err = v.ResourceRules.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_rules"] = val

		val, err = v.TableRules.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["table_rules"] = val

		val, err = v.UrlRules.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url_rules"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuthRolesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuthRolesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuthRolesValue) String() string {
	return "AuthRolesValue"
}

func (v AuthRolesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	resourceRules := types.ListValueMust(
		ResourceRulesType{
			basetypes.ObjectType{
				AttrTypes: ResourceRulesValue{}.AttributeTypes(ctx),
			},
		},
		v.ResourceRules.Elements(),
	)

	if v.ResourceRules.IsNull() {
		resourceRules = types.ListNull(
			ResourceRulesType{
				basetypes.ObjectType{
					AttrTypes: ResourceRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.ResourceRules.IsUnknown() {
		resourceRules = types.ListUnknown(
			ResourceRulesType{
				basetypes.ObjectType{
					AttrTypes: ResourceRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	tableRules := types.ListValueMust(
		TableRulesType{
			basetypes.ObjectType{
				AttrTypes: TableRulesValue{}.AttributeTypes(ctx),
			},
		},
		v.TableRules.Elements(),
	)

	if v.TableRules.IsNull() {
		tableRules = types.ListNull(
			TableRulesType{
				basetypes.ObjectType{
					AttrTypes: TableRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.TableRules.IsUnknown() {
		tableRules = types.ListUnknown(
			TableRulesType{
				basetypes.ObjectType{
					AttrTypes: TableRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	urlRules := types.ListValueMust(
		UrlRulesType{
			basetypes.ObjectType{
				AttrTypes: UrlRulesValue{}.AttributeTypes(ctx),
			},
		},
		v.UrlRules.Elements(),
	)

	if v.UrlRules.IsNull() {
		urlRules = types.ListNull(
			UrlRulesType{
				basetypes.ObjectType{
					AttrTypes: UrlRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.UrlRules.IsUnknown() {
		urlRules = types.ListUnknown(
			UrlRulesType{
				basetypes.ObjectType{
					AttrTypes: UrlRulesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"name":        basetypes.StringType{},
		"namespace":   basetypes.StringType{},
		"resource_rules": basetypes.ListType{
			ElemType: ResourceRulesValue{}.Type(ctx),
		},
		"table_rules": basetypes.ListType{
			ElemType: TableRulesValue{}.Type(ctx),
		},
		"url_rules": basetypes.ListType{
			ElemType: UrlRulesValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description":    v.Description,
			"name":           v.Name,
			"namespace":      v.Namespace,
			"resource_rules": resourceRules,
			"table_rules":    tableRules,
			"url_rules":      urlRules,
		})

	return objVal, diags
}

func (v AuthRolesValue) Equal(o attr.Value) bool {
	other, ok := o.(AuthRolesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	if !v.ResourceRules.Equal(other.ResourceRules) {
		return false
	}

	if !v.TableRules.Equal(other.TableRules) {
		return false
	}

	if !v.UrlRules.Equal(other.UrlRules) {
		return false
	}

	return true
}

func (v AuthRolesValue) Type(ctx context.Context) attr.Type {
	return AuthRolesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuthRolesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"name":        basetypes.StringType{},
		"namespace":   basetypes.StringType{},
		"resource_rules": basetypes.ListType{
			ElemType: ResourceRulesValue{}.Type(ctx),
		},
		"table_rules": basetypes.ListType{
			ElemType: TableRulesValue{}.Type(ctx),
		},
		"url_rules": basetypes.ListType{
			ElemType: UrlRulesValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ResourceRulesType{}

type ResourceRulesType struct {
	basetypes.ObjectType
}

func (t ResourceRulesType) Equal(o attr.Type) bool {
	other, ok := o.(ResourceRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResourceRulesType) String() string {
	return "ResourceRulesType"
}

func (t ResourceRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiGroupsAttribute, ok := attributes["api_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_groups is missing from object`)

		return nil, diags
	}

	apiGroupsVal, ok := apiGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_groups expected to be basetypes.ListValue, was: %T`, apiGroupsAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return nil, diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	resourcesAttribute, ok := attributes["resources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resources is missing from object`)

		return nil, diags
	}

	resourcesVal, ok := resourcesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resources expected to be basetypes.ListValue, was: %T`, resourcesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResourceRulesValue{
		ApiGroups:   apiGroupsVal,
		Permissions: permissionsVal,
		Resources:   resourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewResourceRulesValueNull() ResourceRulesValue {
	return ResourceRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewResourceRulesValueUnknown() ResourceRulesValue {
	return ResourceRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResourceRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResourceRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResourceRulesValue Attribute Value",
				"While creating a ResourceRulesValue value, a missing attribute value was detected. "+
					"A ResourceRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourceRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResourceRulesValue Attribute Type",
				"While creating a ResourceRulesValue value, an invalid attribute value was detected. "+
					"A ResourceRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourceRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResourceRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResourceRulesValue Attribute Value",
				"While creating a ResourceRulesValue value, an extra attribute value was detected. "+
					"A ResourceRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResourceRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResourceRulesValueUnknown(), diags
	}

	apiGroupsAttribute, ok := attributes["api_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_groups is missing from object`)

		return NewResourceRulesValueUnknown(), diags
	}

	apiGroupsVal, ok := apiGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_groups expected to be basetypes.ListValue, was: %T`, apiGroupsAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return NewResourceRulesValueUnknown(), diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	resourcesAttribute, ok := attributes["resources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resources is missing from object`)

		return NewResourceRulesValueUnknown(), diags
	}

	resourcesVal, ok := resourcesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resources expected to be basetypes.ListValue, was: %T`, resourcesAttribute))
	}

	if diags.HasError() {
		return NewResourceRulesValueUnknown(), diags
	}

	return ResourceRulesValue{
		ApiGroups:   apiGroupsVal,
		Permissions: permissionsVal,
		Resources:   resourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewResourceRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResourceRulesValue {
	object, diags := NewResourceRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResourceRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResourceRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResourceRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResourceRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourceRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResourceRulesValueMust(ResourceRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResourceRulesType) ValueType(ctx context.Context) attr.Value {
	return ResourceRulesValue{}
}

var _ basetypes.ObjectValuable = ResourceRulesValue{}

type ResourceRulesValue struct {
	ApiGroups   basetypes.ListValue   `tfsdk:"api_groups"`
	Permissions basetypes.StringValue `tfsdk:"permissions"`
	Resources   basetypes.ListValue   `tfsdk:"resources"`
	state       attr.ValueState
}

func (v ResourceRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["api_groups"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["permissions"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resources"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.ApiGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_groups"] = val

		val, err = v.Permissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permissions"] = val

		val, err = v.Resources.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resources"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResourceRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResourceRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResourceRulesValue) String() string {
	return "ResourceRulesValue"
}

func (v ResourceRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiGroupsVal basetypes.ListValue
	switch {
	case v.ApiGroups.IsUnknown():
		apiGroupsVal = types.ListUnknown(types.StringType)
	case v.ApiGroups.IsNull():
		apiGroupsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		apiGroupsVal, d = types.ListValue(types.StringType, v.ApiGroups.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"api_groups": basetypes.ListType{
				ElemType: types.StringType,
			},
			"permissions": basetypes.StringType{},
			"resources": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var resourcesVal basetypes.ListValue
	switch {
	case v.Resources.IsUnknown():
		resourcesVal = types.ListUnknown(types.StringType)
	case v.Resources.IsNull():
		resourcesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		resourcesVal, d = types.ListValue(types.StringType, v.Resources.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"api_groups": basetypes.ListType{
				ElemType: types.StringType,
			},
			"permissions": basetypes.StringType{},
			"resources": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"api_groups": basetypes.ListType{
			ElemType: types.StringType,
		},
		"permissions": basetypes.StringType{},
		"resources": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_groups":  apiGroupsVal,
			"permissions": v.Permissions,
			"resources":   resourcesVal,
		})

	return objVal, diags
}

func (v ResourceRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(ResourceRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiGroups.Equal(other.ApiGroups) {
		return false
	}

	if !v.Permissions.Equal(other.Permissions) {
		return false
	}

	if !v.Resources.Equal(other.Resources) {
		return false
	}

	return true
}

func (v ResourceRulesValue) Type(ctx context.Context) attr.Type {
	return ResourceRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResourceRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_groups": basetypes.ListType{
			ElemType: types.StringType,
		},
		"permissions": basetypes.StringType{},
		"resources": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = TableRulesType{}

type TableRulesType struct {
	basetypes.ObjectType
}

func (t TableRulesType) Equal(o attr.Type) bool {
	other, ok := o.(TableRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TableRulesType) String() string {
	return "TableRulesType"
}

func (t TableRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return nil, diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TableRulesValue{
		Path:        pathVal,
		Permissions: permissionsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTableRulesValueNull() TableRulesValue {
	return TableRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewTableRulesValueUnknown() TableRulesValue {
	return TableRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTableRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TableRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TableRulesValue Attribute Value",
				"While creating a TableRulesValue value, a missing attribute value was detected. "+
					"A TableRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TableRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TableRulesValue Attribute Type",
				"While creating a TableRulesValue value, an invalid attribute value was detected. "+
					"A TableRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TableRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TableRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TableRulesValue Attribute Value",
				"While creating a TableRulesValue value, an extra attribute value was detected. "+
					"A TableRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TableRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTableRulesValueUnknown(), diags
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewTableRulesValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return NewTableRulesValueUnknown(), diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	if diags.HasError() {
		return NewTableRulesValueUnknown(), diags
	}

	return TableRulesValue{
		Path:        pathVal,
		Permissions: permissionsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTableRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TableRulesValue {
	object, diags := NewTableRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTableRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TableRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTableRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTableRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTableRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTableRulesValueMust(TableRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TableRulesType) ValueType(ctx context.Context) attr.Value {
	return TableRulesValue{}
}

var _ basetypes.ObjectValuable = TableRulesValue{}

type TableRulesValue struct {
	Path        basetypes.StringValue `tfsdk:"path"`
	Permissions basetypes.StringValue `tfsdk:"permissions"`
	state       attr.ValueState
}

func (v TableRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["permissions"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		val, err = v.Permissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permissions"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TableRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TableRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TableRulesValue) String() string {
	return "TableRulesValue"
}

func (v TableRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"path":        basetypes.StringType{},
		"permissions": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"path":        v.Path,
			"permissions": v.Permissions,
		})

	return objVal, diags
}

func (v TableRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(TableRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	if !v.Permissions.Equal(other.Permissions) {
		return false
	}

	return true
}

func (v TableRulesValue) Type(ctx context.Context) attr.Type {
	return TableRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TableRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"path":        basetypes.StringType{},
		"permissions": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = UrlRulesType{}

type UrlRulesType struct {
	basetypes.ObjectType
}

func (t UrlRulesType) Equal(o attr.Type) bool {
	other, ok := o.(UrlRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UrlRulesType) String() string {
	return "UrlRulesType"
}

func (t UrlRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return nil, diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UrlRulesValue{
		Path:        pathVal,
		Permissions: permissionsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewUrlRulesValueNull() UrlRulesValue {
	return UrlRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewUrlRulesValueUnknown() UrlRulesValue {
	return UrlRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUrlRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UrlRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UrlRulesValue Attribute Value",
				"While creating a UrlRulesValue value, a missing attribute value was detected. "+
					"A UrlRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UrlRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UrlRulesValue Attribute Type",
				"While creating a UrlRulesValue value, an invalid attribute value was detected. "+
					"A UrlRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UrlRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UrlRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UrlRulesValue Attribute Value",
				"While creating a UrlRulesValue value, an extra attribute value was detected. "+
					"A UrlRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UrlRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUrlRulesValueUnknown(), diags
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewUrlRulesValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	permissionsAttribute, ok := attributes["permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permissions is missing from object`)

		return NewUrlRulesValueUnknown(), diags
	}

	permissionsVal, ok := permissionsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permissions expected to be basetypes.StringValue, was: %T`, permissionsAttribute))
	}

	if diags.HasError() {
		return NewUrlRulesValueUnknown(), diags
	}

	return UrlRulesValue{
		Path:        pathVal,
		Permissions: permissionsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewUrlRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UrlRulesValue {
	object, diags := NewUrlRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUrlRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UrlRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUrlRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUrlRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUrlRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUrlRulesValueMust(UrlRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UrlRulesType) ValueType(ctx context.Context) attr.Value {
	return UrlRulesValue{}
}

var _ basetypes.ObjectValuable = UrlRulesValue{}

type UrlRulesValue struct {
	Path        basetypes.StringValue `tfsdk:"path"`
	Permissions basetypes.StringValue `tfsdk:"permissions"`
	state       attr.ValueState
}

func (v UrlRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["permissions"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		val, err = v.Permissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permissions"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UrlRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UrlRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UrlRulesValue) String() string {
	return "UrlRulesValue"
}

func (v UrlRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"path":        basetypes.StringType{},
		"permissions": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"path":        v.Path,
			"permissions": v.Permissions,
		})

	return objVal, diags
}

func (v UrlRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(UrlRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	if !v.Permissions.Equal(other.Permissions) {
		return false
	}

	return true
}

func (v UrlRulesValue) Type(ctx context.Context) attr.Type {
	return UrlRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UrlRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"path":        basetypes.StringType{},
		"permissions": basetypes.StringType{},
	}
}
