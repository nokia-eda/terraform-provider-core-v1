// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_transaction_node_config_diff

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TransactionNodeConfigDiffDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"after": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"data": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: AfterType{
					ObjectType: types.ObjectType{
						AttrTypes: AfterValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"before": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"data": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: BeforeType{
					ObjectType: types.ObjectType{
						AttrTypes: BeforeValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"data_unavailable": schema.BoolAttribute{
				Computed:            true,
				Description:         "True if there is no data available for the result",
				MarkdownDescription: "True if there is no data available for the result",
			},
			"format": schema.StringAttribute{
				Computed:            true,
				Description:         "The format of the response - Text or YAML",
				MarkdownDescription: "The format of the response - Text or YAML",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "Namespace of the node for the configuration diff being requested.",
				MarkdownDescription: "Namespace of the node for the configuration diff being requested.",
			},
			"node": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the node for the configuration diff being requested",
				MarkdownDescription: "Name of the node for the configuration diff being requested",
			},
			"transaction_id": schema.Int64Attribute{
				Required:            true,
				Description:         "The identifier for the transaction whose resource diff is being requested",
				MarkdownDescription: "The identifier for the transaction whose resource diff is being requested",
			},
		},
	}
}

type TransactionNodeConfigDiffModel struct {
	After           AfterValue   `tfsdk:"after"`
	Before          BeforeValue  `tfsdk:"before"`
	DataUnavailable types.Bool   `tfsdk:"data_unavailable"`
	Format          types.String `tfsdk:"format"`
	Namespace       types.String `tfsdk:"namespace"`
	Node            types.String `tfsdk:"node"`
	TransactionId   types.Int64  `tfsdk:"transaction_id"`
}

var _ basetypes.ObjectTypable = AfterType{}

type AfterType struct {
	basetypes.ObjectType
}

func (t AfterType) Equal(o attr.Type) bool {
	other, ok := o.(AfterType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AfterType) String() string {
	return "AfterType"
}

func (t AfterType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dataAttribute, ok := attributes["data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`data is missing from object`)

		return nil, diags
	}

	dataVal, ok := dataAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`data expected to be basetypes.StringValue, was: %T`, dataAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AfterValue{
		Data:  dataVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAfterValueNull() AfterValue {
	return AfterValue{
		state: attr.ValueStateNull,
	}
}

func NewAfterValueUnknown() AfterValue {
	return AfterValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAfterValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AfterValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AfterValue Attribute Value",
				"While creating a AfterValue value, a missing attribute value was detected. "+
					"A AfterValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AfterValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AfterValue Attribute Type",
				"While creating a AfterValue value, an invalid attribute value was detected. "+
					"A AfterValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AfterValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AfterValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AfterValue Attribute Value",
				"While creating a AfterValue value, an extra attribute value was detected. "+
					"A AfterValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AfterValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAfterValueUnknown(), diags
	}

	dataAttribute, ok := attributes["data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`data is missing from object`)

		return NewAfterValueUnknown(), diags
	}

	dataVal, ok := dataAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`data expected to be basetypes.StringValue, was: %T`, dataAttribute))
	}

	if diags.HasError() {
		return NewAfterValueUnknown(), diags
	}

	return AfterValue{
		Data:  dataVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAfterValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AfterValue {
	object, diags := NewAfterValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAfterValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AfterType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAfterValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAfterValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAfterValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAfterValueMust(AfterValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AfterType) ValueType(ctx context.Context) attr.Value {
	return AfterValue{}
}

var _ basetypes.ObjectValuable = AfterValue{}

type AfterValue struct {
	Data  basetypes.StringValue `tfsdk:"data"`
	state attr.ValueState
}

func (v AfterValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["data"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Data.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["data"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AfterValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AfterValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AfterValue) String() string {
	return "AfterValue"
}

func (v AfterValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"data": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"data": v.Data,
		})

	return objVal, diags
}

func (v AfterValue) Equal(o attr.Value) bool {
	other, ok := o.(AfterValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Data.Equal(other.Data) {
		return false
	}

	return true
}

func (v AfterValue) Type(ctx context.Context) attr.Type {
	return AfterType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AfterValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"data": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BeforeType{}

type BeforeType struct {
	basetypes.ObjectType
}

func (t BeforeType) Equal(o attr.Type) bool {
	other, ok := o.(BeforeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BeforeType) String() string {
	return "BeforeType"
}

func (t BeforeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dataAttribute, ok := attributes["data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`data is missing from object`)

		return nil, diags
	}

	dataVal, ok := dataAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`data expected to be basetypes.StringValue, was: %T`, dataAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BeforeValue{
		Data:  dataVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewBeforeValueNull() BeforeValue {
	return BeforeValue{
		state: attr.ValueStateNull,
	}
}

func NewBeforeValueUnknown() BeforeValue {
	return BeforeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBeforeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BeforeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BeforeValue Attribute Value",
				"While creating a BeforeValue value, a missing attribute value was detected. "+
					"A BeforeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BeforeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BeforeValue Attribute Type",
				"While creating a BeforeValue value, an invalid attribute value was detected. "+
					"A BeforeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BeforeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BeforeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BeforeValue Attribute Value",
				"While creating a BeforeValue value, an extra attribute value was detected. "+
					"A BeforeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BeforeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBeforeValueUnknown(), diags
	}

	dataAttribute, ok := attributes["data"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`data is missing from object`)

		return NewBeforeValueUnknown(), diags
	}

	dataVal, ok := dataAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`data expected to be basetypes.StringValue, was: %T`, dataAttribute))
	}

	if diags.HasError() {
		return NewBeforeValueUnknown(), diags
	}

	return BeforeValue{
		Data:  dataVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewBeforeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BeforeValue {
	object, diags := NewBeforeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBeforeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BeforeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBeforeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBeforeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBeforeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBeforeValueMust(BeforeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BeforeType) ValueType(ctx context.Context) attr.Value {
	return BeforeValue{}
}

var _ basetypes.ObjectValuable = BeforeValue{}

type BeforeValue struct {
	Data  basetypes.StringValue `tfsdk:"data"`
	state attr.ValueState
}

func (v BeforeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["data"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Data.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["data"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BeforeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BeforeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BeforeValue) String() string {
	return "BeforeValue"
}

func (v BeforeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"data": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"data": v.Data,
		})

	return objVal, diags
}

func (v BeforeValue) Equal(o attr.Value) bool {
	other, ok := o.(BeforeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Data.Equal(other.Data) {
		return false
	}

	return true
}

func (v BeforeValue) Type(ctx context.Context) attr.Type {
	return BeforeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BeforeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"data": basetypes.StringType{},
	}
}
