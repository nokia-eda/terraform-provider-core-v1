// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_workflow

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WorkflowResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cr": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
					CustomType: CrType{
						ObjectType: types.ObjectType{
							AttrTypes: CrValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "Custom resource that defines the workflow to execute",
				MarkdownDescription: "Custom resource that defines the workflow to execute",
			},
			"description": schema.StringAttribute{
				Required:            true,
				Description:         "Description message for the workflow",
				MarkdownDescription: "Description message for the workflow",
			},
			"error": schema.StringAttribute{
				Computed:            true,
				Description:         "If no error is present, the flow completed successfully",
				MarkdownDescription: "If no error is present, the flow completed successfully",
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "A workflow identifier; these are assigned by the system to a posted workflow.",
				MarkdownDescription: "A workflow identifier; these are assigned by the system to a posted workflow.",
			},
			"json_result": schema.StringAttribute{
				Computed:            true,
				Description:         "A JSON representation of the result",
				MarkdownDescription: "A JSON representation of the result",
			},
			"log": schema.StringAttribute{
				Computed:            true,
				Description:         "Log output from the flow",
				MarkdownDescription: "Log output from the flow",
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the workflow",
				MarkdownDescription: "Name of the workflow",
			},
			"namespace": schema.StringAttribute{
				Computed:            true,
				Description:         "The namespace in which the flow ran",
				MarkdownDescription: "The namespace in which the flow ran",
			},
			"parent_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The id of the parent workflow, if any",
				MarkdownDescription: "The id of the parent workflow, if any",
			},
			"stages": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"completed": schema.BoolAttribute{
							Computed:            true,
							Description:         "True if the stage has completed",
							MarkdownDescription: "True if the stage has completed",
						},
						"had_error": schema.BoolAttribute{
							Computed:            true,
							Description:         "True if the stage is complete and there was an error",
							MarkdownDescription: "True if the stage is complete and there was an error",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the flow stage",
							MarkdownDescription: "Name of the flow stage",
						},
						"skipped": schema.BoolAttribute{
							Computed:            true,
							Description:         "True if the stage was skipped",
							MarkdownDescription: "True if the stage was skipped",
						},
						"started": schema.BoolAttribute{
							Computed:            true,
							Description:         "True if the stage has started",
							MarkdownDescription: "True if the stage has started",
						},
						"sub_flow_ids": schema.ListAttribute{
							ElementType:         types.Int64Type,
							Computed:            true,
							Description:         "The ids of flows triggered by the stage",
							MarkdownDescription: "The ids of flows triggered by the stage",
						},
					},
					CustomType: StagesType{
						ObjectType: types.ObjectType{
							AttrTypes: StagesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of stages of the workflow",
				MarkdownDescription: "The list of stages of the workflow",
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"subflows_waiting_for_input": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Computed:            true,
				Description:         "The ids of any subflows that are waiting for user input",
				MarkdownDescription: "The ids of any subflows that are waiting for user input",
			},
			"type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of workflow",
				MarkdownDescription: "The type of workflow",
			},
			"wait_for_input_prompt": schema.StringAttribute{
				Computed:            true,
				Description:         "Set if the state is waiting for input",
				MarkdownDescription: "Set if the state is waiting for input",
			},
			"workflow_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The id for the requested workflow",
				MarkdownDescription: "The id for the requested workflow",
			},
		},
	}
}

type WorkflowModel struct {
	Cr                      types.Map    `tfsdk:"cr"`
	Description             types.String `tfsdk:"description"`
	Error                   types.String `tfsdk:"error"`
	Id                      types.Int64  `tfsdk:"id"`
	JsonResult              types.String `tfsdk:"json_result"`
	Log                     types.String `tfsdk:"log"`
	Name                    types.String `tfsdk:"name"`
	Namespace               types.String `tfsdk:"namespace"`
	ParentId                types.Int64  `tfsdk:"parent_id"`
	Stages                  types.List   `tfsdk:"stages"`
	State                   types.String `tfsdk:"state"`
	SubflowsWaitingForInput types.List   `tfsdk:"subflows_waiting_for_input"`
	Type                    types.String `tfsdk:"type"`
	WaitForInputPrompt      types.String `tfsdk:"wait_for_input_prompt"`
	WorkflowId              types.String `tfsdk:"workflow_id"`
}

var _ basetypes.ObjectTypable = CrType{}

type CrType struct {
	basetypes.ObjectType
}

func (t CrType) Equal(o attr.Type) bool {
	other, ok := o.(CrType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CrType) String() string {
	return "CrType"
}

func (t CrType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return CrValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewCrValueNull() CrValue {
	return CrValue{
		state: attr.ValueStateNull,
	}
}

func NewCrValueUnknown() CrValue {
	return CrValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCrValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CrValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CrValue Attribute Value",
				"While creating a CrValue value, a missing attribute value was detected. "+
					"A CrValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CrValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CrValue Attribute Type",
				"While creating a CrValue value, an invalid attribute value was detected. "+
					"A CrValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CrValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CrValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CrValue Attribute Value",
				"While creating a CrValue value, an extra attribute value was detected. "+
					"A CrValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CrValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCrValueUnknown(), diags
	}

	if diags.HasError() {
		return NewCrValueUnknown(), diags
	}

	return CrValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewCrValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CrValue {
	object, diags := NewCrValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCrValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CrType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCrValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCrValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCrValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCrValueMust(CrValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CrType) ValueType(ctx context.Context) attr.Value {
	return CrValue{}
}

var _ basetypes.ObjectValuable = CrValue{}

type CrValue struct {
	state attr.ValueState
}

func (v CrValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CrValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CrValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CrValue) String() string {
	return "CrValue"
}

func (v CrValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v CrValue) Equal(o attr.Value) bool {
	other, ok := o.(CrValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v CrValue) Type(ctx context.Context) attr.Type {
	return CrType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CrValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = StagesType{}

type StagesType struct {
	basetypes.ObjectType
}

func (t StagesType) Equal(o attr.Type) bool {
	other, ok := o.(StagesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StagesType) String() string {
	return "StagesType"
}

func (t StagesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	completedAttribute, ok := attributes["completed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completed is missing from object`)

		return nil, diags
	}

	completedVal, ok := completedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completed expected to be basetypes.BoolValue, was: %T`, completedAttribute))
	}

	hadErrorAttribute, ok := attributes["had_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`had_error is missing from object`)

		return nil, diags
	}

	hadErrorVal, ok := hadErrorAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`had_error expected to be basetypes.BoolValue, was: %T`, hadErrorAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	skippedAttribute, ok := attributes["skipped"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipped is missing from object`)

		return nil, diags
	}

	skippedVal, ok := skippedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipped expected to be basetypes.BoolValue, was: %T`, skippedAttribute))
	}

	startedAttribute, ok := attributes["started"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`started is missing from object`)

		return nil, diags
	}

	startedVal, ok := startedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`started expected to be basetypes.BoolValue, was: %T`, startedAttribute))
	}

	subFlowIdsAttribute, ok := attributes["sub_flow_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_flow_ids is missing from object`)

		return nil, diags
	}

	subFlowIdsVal, ok := subFlowIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_flow_ids expected to be basetypes.ListValue, was: %T`, subFlowIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StagesValue{
		Completed:  completedVal,
		HadError:   hadErrorVal,
		Name:       nameVal,
		Skipped:    skippedVal,
		Started:    startedVal,
		SubFlowIds: subFlowIdsVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewStagesValueNull() StagesValue {
	return StagesValue{
		state: attr.ValueStateNull,
	}
}

func NewStagesValueUnknown() StagesValue {
	return StagesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStagesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StagesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StagesValue Attribute Value",
				"While creating a StagesValue value, a missing attribute value was detected. "+
					"A StagesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StagesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StagesValue Attribute Type",
				"While creating a StagesValue value, an invalid attribute value was detected. "+
					"A StagesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StagesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StagesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StagesValue Attribute Value",
				"While creating a StagesValue value, an extra attribute value was detected. "+
					"A StagesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StagesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStagesValueUnknown(), diags
	}

	completedAttribute, ok := attributes["completed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completed is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	completedVal, ok := completedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completed expected to be basetypes.BoolValue, was: %T`, completedAttribute))
	}

	hadErrorAttribute, ok := attributes["had_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`had_error is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	hadErrorVal, ok := hadErrorAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`had_error expected to be basetypes.BoolValue, was: %T`, hadErrorAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	skippedAttribute, ok := attributes["skipped"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipped is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	skippedVal, ok := skippedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipped expected to be basetypes.BoolValue, was: %T`, skippedAttribute))
	}

	startedAttribute, ok := attributes["started"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`started is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	startedVal, ok := startedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`started expected to be basetypes.BoolValue, was: %T`, startedAttribute))
	}

	subFlowIdsAttribute, ok := attributes["sub_flow_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_flow_ids is missing from object`)

		return NewStagesValueUnknown(), diags
	}

	subFlowIdsVal, ok := subFlowIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_flow_ids expected to be basetypes.ListValue, was: %T`, subFlowIdsAttribute))
	}

	if diags.HasError() {
		return NewStagesValueUnknown(), diags
	}

	return StagesValue{
		Completed:  completedVal,
		HadError:   hadErrorVal,
		Name:       nameVal,
		Skipped:    skippedVal,
		Started:    startedVal,
		SubFlowIds: subFlowIdsVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewStagesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StagesValue {
	object, diags := NewStagesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStagesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StagesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStagesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStagesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStagesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStagesValueMust(StagesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StagesType) ValueType(ctx context.Context) attr.Value {
	return StagesValue{}
}

var _ basetypes.ObjectValuable = StagesValue{}

type StagesValue struct {
	Completed  basetypes.BoolValue   `tfsdk:"completed"`
	HadError   basetypes.BoolValue   `tfsdk:"had_error"`
	Name       basetypes.StringValue `tfsdk:"name"`
	Skipped    basetypes.BoolValue   `tfsdk:"skipped"`
	Started    basetypes.BoolValue   `tfsdk:"started"`
	SubFlowIds basetypes.ListValue   `tfsdk:"sub_flow_ids"`
	state      attr.ValueState
}

func (v StagesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["completed"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["had_error"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["skipped"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["started"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["sub_flow_ids"] = basetypes.ListType{
		ElemType: types.Int64Type,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Completed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["completed"] = val

		val, err = v.HadError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["had_error"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Skipped.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skipped"] = val

		val, err = v.Started.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["started"] = val

		val, err = v.SubFlowIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sub_flow_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StagesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StagesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StagesValue) String() string {
	return "StagesValue"
}

func (v StagesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var subFlowIdsVal basetypes.ListValue
	switch {
	case v.SubFlowIds.IsUnknown():
		subFlowIdsVal = types.ListUnknown(types.Int64Type)
	case v.SubFlowIds.IsNull():
		subFlowIdsVal = types.ListNull(types.Int64Type)
	default:
		var d diag.Diagnostics
		subFlowIdsVal, d = types.ListValue(types.Int64Type, v.SubFlowIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"completed": basetypes.BoolType{},
			"had_error": basetypes.BoolType{},
			"name":      basetypes.StringType{},
			"skipped":   basetypes.BoolType{},
			"started":   basetypes.BoolType{},
			"sub_flow_ids": basetypes.ListType{
				ElemType: types.Int64Type,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"completed": basetypes.BoolType{},
		"had_error": basetypes.BoolType{},
		"name":      basetypes.StringType{},
		"skipped":   basetypes.BoolType{},
		"started":   basetypes.BoolType{},
		"sub_flow_ids": basetypes.ListType{
			ElemType: types.Int64Type,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"completed":    v.Completed,
			"had_error":    v.HadError,
			"name":         v.Name,
			"skipped":      v.Skipped,
			"started":      v.Started,
			"sub_flow_ids": subFlowIdsVal,
		})

	return objVal, diags
}

func (v StagesValue) Equal(o attr.Value) bool {
	other, ok := o.(StagesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Completed.Equal(other.Completed) {
		return false
	}

	if !v.HadError.Equal(other.HadError) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Skipped.Equal(other.Skipped) {
		return false
	}

	if !v.Started.Equal(other.Started) {
		return false
	}

	if !v.SubFlowIds.Equal(other.SubFlowIds) {
		return false
	}

	return true
}

func (v StagesValue) Type(ctx context.Context) attr.Type {
	return StagesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StagesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"completed": basetypes.BoolType{},
		"had_error": basetypes.BoolType{},
		"name":      basetypes.StringType{},
		"skipped":   basetypes.BoolType{},
		"started":   basetypes.BoolType{},
		"sub_flow_ids": basetypes.ListType{
			ElemType: types.Int64Type,
		},
	}
}
