// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_store_app_requirements_graph

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StoreAppRequirementsGraphDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required:            true,
				Description:         "application ID of the application version",
				MarkdownDescription: "application ID of the application version",
			},
			"catalog": schema.StringAttribute{
				Required:            true,
				Description:         "The catalog where the application version resides",
				MarkdownDescription: "The catalog where the application version resides",
			},
			"commit_hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The commit hash for the application version.",
				MarkdownDescription: "The commit hash for the application version.",
			},
			"graph_items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The application identifier to which the 'requires' elements of graph items will refer.",
							MarkdownDescription: "The application identifier to which the 'requires' elements of graph items will refer.",
						},
						"installed_app_version": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The identifier for the application",
									MarkdownDescription: "The identifier for the application",
								},
								"catalog": schema.StringAttribute{
									Computed:            true,
									Description:         "The catalog in which this application version was found",
									MarkdownDescription: "The catalog in which this application version was found",
								},
								"commit_hash": schema.StringAttribute{
									Computed:            true,
									Description:         "The commit hash for the application version.",
									MarkdownDescription: "The commit hash for the application version.",
								},
								"sem_ver": schema.StringAttribute{
									Computed:            true,
									Description:         "The semantic version for the application version.",
									MarkdownDescription: "The semantic version for the application version.",
								},
							},
							CustomType: InstalledAppVersionType{
								ObjectType: types.ObjectType{
									AttrTypes: InstalledAppVersionValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "The application version installed in the cluster, if installed.",
							MarkdownDescription: "The application version installed in the cluster, if installed.",
						},
						"requires": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The identifiers for the applications on which this application version depends.",
							MarkdownDescription: "The identifiers for the applications on which this application version depends.",
						},
						"target_app_version": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The identifier for the application",
									MarkdownDescription: "The identifier for the application",
								},
								"catalog": schema.StringAttribute{
									Computed:            true,
									Description:         "The catalog in which this application version was found",
									MarkdownDescription: "The catalog in which this application version was found",
								},
								"commit_hash": schema.StringAttribute{
									Computed:            true,
									Description:         "The commit hash for the application version.",
									MarkdownDescription: "The commit hash for the application version.",
								},
								"sem_ver": schema.StringAttribute{
									Computed:            true,
									Description:         "The semantic version for the application version.",
									MarkdownDescription: "The semantic version for the application version.",
								},
							},
							CustomType: TargetAppVersionType{
								ObjectType: types.ObjectType{
									AttrTypes: TargetAppVersionValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "This graph item instance contains the dependencies for this particular application version.",
							MarkdownDescription: "This graph item instance contains the dependencies for this particular application version.",
						},
					},
					CustomType: GraphItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: GraphItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The items in the requirements graph resulting from the request.  Only present if the state is FINISHED.",
				MarkdownDescription: "The items in the requirements graph resulting from the request.  Only present if the state is FINISHED.",
			},
			"sem_ver": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The semantic version for the application version.",
				MarkdownDescription: "The semantic version for the application version.",
			},
			"state": schema.StringAttribute{
				Computed:            true,
				Description:         "The state of the requirements graph generation request.",
				MarkdownDescription: "The state of the requirements graph generation request.",
			},
		},
	}
}

type StoreAppRequirementsGraphModel struct {
	AppId      types.String `tfsdk:"app_id"`
	Catalog    types.String `tfsdk:"catalog"`
	CommitHash types.String `tfsdk:"commit_hash"`
	GraphItems types.List   `tfsdk:"graph_items"`
	SemVer     types.String `tfsdk:"sem_ver"`
	State      types.String `tfsdk:"state"`
}

var _ basetypes.ObjectTypable = GraphItemsType{}

type GraphItemsType struct {
	basetypes.ObjectType
}

func (t GraphItemsType) Equal(o attr.Type) bool {
	other, ok := o.(GraphItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GraphItemsType) String() string {
	return "GraphItemsType"
}

func (t GraphItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	installedAppVersionAttribute, ok := attributes["installed_app_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`installed_app_version is missing from object`)

		return nil, diags
	}

	installedAppVersionVal, ok := installedAppVersionAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`installed_app_version expected to be basetypes.ObjectValue, was: %T`, installedAppVersionAttribute))
	}

	requiresAttribute, ok := attributes["requires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`requires is missing from object`)

		return nil, diags
	}

	requiresVal, ok := requiresAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`requires expected to be basetypes.ListValue, was: %T`, requiresAttribute))
	}

	targetAppVersionAttribute, ok := attributes["target_app_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_app_version is missing from object`)

		return nil, diags
	}

	targetAppVersionVal, ok := targetAppVersionAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_app_version expected to be basetypes.ObjectValue, was: %T`, targetAppVersionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GraphItemsValue{
		AppId:               appIdVal,
		InstalledAppVersion: installedAppVersionVal,
		Requires:            requiresVal,
		TargetAppVersion:    targetAppVersionVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewGraphItemsValueNull() GraphItemsValue {
	return GraphItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewGraphItemsValueUnknown() GraphItemsValue {
	return GraphItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGraphItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GraphItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GraphItemsValue Attribute Value",
				"While creating a GraphItemsValue value, a missing attribute value was detected. "+
					"A GraphItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GraphItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GraphItemsValue Attribute Type",
				"While creating a GraphItemsValue value, an invalid attribute value was detected. "+
					"A GraphItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GraphItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GraphItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GraphItemsValue Attribute Value",
				"While creating a GraphItemsValue value, an extra attribute value was detected. "+
					"A GraphItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GraphItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGraphItemsValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewGraphItemsValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	installedAppVersionAttribute, ok := attributes["installed_app_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`installed_app_version is missing from object`)

		return NewGraphItemsValueUnknown(), diags
	}

	installedAppVersionVal, ok := installedAppVersionAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`installed_app_version expected to be basetypes.ObjectValue, was: %T`, installedAppVersionAttribute))
	}

	requiresAttribute, ok := attributes["requires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`requires is missing from object`)

		return NewGraphItemsValueUnknown(), diags
	}

	requiresVal, ok := requiresAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`requires expected to be basetypes.ListValue, was: %T`, requiresAttribute))
	}

	targetAppVersionAttribute, ok := attributes["target_app_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_app_version is missing from object`)

		return NewGraphItemsValueUnknown(), diags
	}

	targetAppVersionVal, ok := targetAppVersionAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_app_version expected to be basetypes.ObjectValue, was: %T`, targetAppVersionAttribute))
	}

	if diags.HasError() {
		return NewGraphItemsValueUnknown(), diags
	}

	return GraphItemsValue{
		AppId:               appIdVal,
		InstalledAppVersion: installedAppVersionVal,
		Requires:            requiresVal,
		TargetAppVersion:    targetAppVersionVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewGraphItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GraphItemsValue {
	object, diags := NewGraphItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGraphItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GraphItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGraphItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGraphItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGraphItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGraphItemsValueMust(GraphItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GraphItemsType) ValueType(ctx context.Context) attr.Value {
	return GraphItemsValue{}
}

var _ basetypes.ObjectValuable = GraphItemsValue{}

type GraphItemsValue struct {
	AppId               basetypes.StringValue `tfsdk:"app_id"`
	InstalledAppVersion basetypes.ObjectValue `tfsdk:"installed_app_version"`
	Requires            basetypes.ListValue   `tfsdk:"requires"`
	TargetAppVersion    basetypes.ObjectValue `tfsdk:"target_app_version"`
	state               attr.ValueState
}

func (v GraphItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["installed_app_version"] = basetypes.ObjectType{
		AttrTypes: InstalledAppVersionValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["requires"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["target_app_version"] = basetypes.ObjectType{
		AttrTypes: TargetAppVersionValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.InstalledAppVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["installed_app_version"] = val

		val, err = v.Requires.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["requires"] = val

		val, err = v.TargetAppVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target_app_version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GraphItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GraphItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GraphItemsValue) String() string {
	return "GraphItemsValue"
}

func (v GraphItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var installedAppVersion basetypes.ObjectValue

	if v.InstalledAppVersion.IsNull() {
		installedAppVersion = types.ObjectNull(
			InstalledAppVersionValue{}.AttributeTypes(ctx),
		)
	}

	if v.InstalledAppVersion.IsUnknown() {
		installedAppVersion = types.ObjectUnknown(
			InstalledAppVersionValue{}.AttributeTypes(ctx),
		)
	}

	if !v.InstalledAppVersion.IsNull() && !v.InstalledAppVersion.IsUnknown() {
		installedAppVersion = types.ObjectValueMust(
			InstalledAppVersionValue{}.AttributeTypes(ctx),
			v.InstalledAppVersion.Attributes(),
		)
	}

	var targetAppVersion basetypes.ObjectValue

	if v.TargetAppVersion.IsNull() {
		targetAppVersion = types.ObjectNull(
			TargetAppVersionValue{}.AttributeTypes(ctx),
		)
	}

	if v.TargetAppVersion.IsUnknown() {
		targetAppVersion = types.ObjectUnknown(
			TargetAppVersionValue{}.AttributeTypes(ctx),
		)
	}

	if !v.TargetAppVersion.IsNull() && !v.TargetAppVersion.IsUnknown() {
		targetAppVersion = types.ObjectValueMust(
			TargetAppVersionValue{}.AttributeTypes(ctx),
			v.TargetAppVersion.Attributes(),
		)
	}

	var requiresVal basetypes.ListValue
	switch {
	case v.Requires.IsUnknown():
		requiresVal = types.ListUnknown(types.StringType)
	case v.Requires.IsNull():
		requiresVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		requiresVal, d = types.ListValue(types.StringType, v.Requires.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"app_id": basetypes.StringType{},
			"installed_app_version": basetypes.ObjectType{
				AttrTypes: InstalledAppVersionValue{}.AttributeTypes(ctx),
			},
			"requires": basetypes.ListType{
				ElemType: types.StringType,
			},
			"target_app_version": basetypes.ObjectType{
				AttrTypes: TargetAppVersionValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"app_id": basetypes.StringType{},
		"installed_app_version": basetypes.ObjectType{
			AttrTypes: InstalledAppVersionValue{}.AttributeTypes(ctx),
		},
		"requires": basetypes.ListType{
			ElemType: types.StringType,
		},
		"target_app_version": basetypes.ObjectType{
			AttrTypes: TargetAppVersionValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":                v.AppId,
			"installed_app_version": installedAppVersion,
			"requires":              requiresVal,
			"target_app_version":    targetAppVersion,
		})

	return objVal, diags
}

func (v GraphItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(GraphItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.InstalledAppVersion.Equal(other.InstalledAppVersion) {
		return false
	}

	if !v.Requires.Equal(other.Requires) {
		return false
	}

	if !v.TargetAppVersion.Equal(other.TargetAppVersion) {
		return false
	}

	return true
}

func (v GraphItemsValue) Type(ctx context.Context) attr.Type {
	return GraphItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GraphItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id": basetypes.StringType{},
		"installed_app_version": basetypes.ObjectType{
			AttrTypes: InstalledAppVersionValue{}.AttributeTypes(ctx),
		},
		"requires": basetypes.ListType{
			ElemType: types.StringType,
		},
		"target_app_version": basetypes.ObjectType{
			AttrTypes: TargetAppVersionValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = InstalledAppVersionType{}

type InstalledAppVersionType struct {
	basetypes.ObjectType
}

func (t InstalledAppVersionType) Equal(o attr.Type) bool {
	other, ok := o.(InstalledAppVersionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InstalledAppVersionType) String() string {
	return "InstalledAppVersionType"
}

func (t InstalledAppVersionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return nil, diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return nil, diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return nil, diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InstalledAppVersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewInstalledAppVersionValueNull() InstalledAppVersionValue {
	return InstalledAppVersionValue{
		state: attr.ValueStateNull,
	}
}

func NewInstalledAppVersionValueUnknown() InstalledAppVersionValue {
	return InstalledAppVersionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInstalledAppVersionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InstalledAppVersionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InstalledAppVersionValue Attribute Value",
				"While creating a InstalledAppVersionValue value, a missing attribute value was detected. "+
					"A InstalledAppVersionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstalledAppVersionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InstalledAppVersionValue Attribute Type",
				"While creating a InstalledAppVersionValue value, an invalid attribute value was detected. "+
					"A InstalledAppVersionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstalledAppVersionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InstalledAppVersionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InstalledAppVersionValue Attribute Value",
				"While creating a InstalledAppVersionValue value, an extra attribute value was detected. "+
					"A InstalledAppVersionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InstalledAppVersionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInstalledAppVersionValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewInstalledAppVersionValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return NewInstalledAppVersionValueUnknown(), diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return NewInstalledAppVersionValueUnknown(), diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return NewInstalledAppVersionValueUnknown(), diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return NewInstalledAppVersionValueUnknown(), diags
	}

	return InstalledAppVersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewInstalledAppVersionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InstalledAppVersionValue {
	object, diags := NewInstalledAppVersionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInstalledAppVersionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InstalledAppVersionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInstalledAppVersionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInstalledAppVersionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInstalledAppVersionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInstalledAppVersionValueMust(InstalledAppVersionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InstalledAppVersionType) ValueType(ctx context.Context) attr.Value {
	return InstalledAppVersionValue{}
}

var _ basetypes.ObjectValuable = InstalledAppVersionValue{}

type InstalledAppVersionValue struct {
	AppId      basetypes.StringValue `tfsdk:"app_id"`
	Catalog    basetypes.StringValue `tfsdk:"catalog"`
	CommitHash basetypes.StringValue `tfsdk:"commit_hash"`
	SemVer     basetypes.StringValue `tfsdk:"sem_ver"`
	state      attr.ValueState
}

func (v InstalledAppVersionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["catalog"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["commit_hash"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sem_ver"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.Catalog.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["catalog"] = val

		val, err = v.CommitHash.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["commit_hash"] = val

		val, err = v.SemVer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sem_ver"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InstalledAppVersionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InstalledAppVersionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InstalledAppVersionValue) String() string {
	return "InstalledAppVersionValue"
}

func (v InstalledAppVersionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":      v.AppId,
			"catalog":     v.Catalog,
			"commit_hash": v.CommitHash,
			"sem_ver":     v.SemVer,
		})

	return objVal, diags
}

func (v InstalledAppVersionValue) Equal(o attr.Value) bool {
	other, ok := o.(InstalledAppVersionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.Catalog.Equal(other.Catalog) {
		return false
	}

	if !v.CommitHash.Equal(other.CommitHash) {
		return false
	}

	if !v.SemVer.Equal(other.SemVer) {
		return false
	}

	return true
}

func (v InstalledAppVersionValue) Type(ctx context.Context) attr.Type {
	return InstalledAppVersionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InstalledAppVersionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TargetAppVersionType{}

type TargetAppVersionType struct {
	basetypes.ObjectType
}

func (t TargetAppVersionType) Equal(o attr.Type) bool {
	other, ok := o.(TargetAppVersionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TargetAppVersionType) String() string {
	return "TargetAppVersionType"
}

func (t TargetAppVersionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return nil, diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return nil, diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return nil, diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TargetAppVersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTargetAppVersionValueNull() TargetAppVersionValue {
	return TargetAppVersionValue{
		state: attr.ValueStateNull,
	}
}

func NewTargetAppVersionValueUnknown() TargetAppVersionValue {
	return TargetAppVersionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTargetAppVersionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TargetAppVersionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TargetAppVersionValue Attribute Value",
				"While creating a TargetAppVersionValue value, a missing attribute value was detected. "+
					"A TargetAppVersionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TargetAppVersionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TargetAppVersionValue Attribute Type",
				"While creating a TargetAppVersionValue value, an invalid attribute value was detected. "+
					"A TargetAppVersionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TargetAppVersionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TargetAppVersionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TargetAppVersionValue Attribute Value",
				"While creating a TargetAppVersionValue value, an extra attribute value was detected. "+
					"A TargetAppVersionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TargetAppVersionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTargetAppVersionValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewTargetAppVersionValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	catalogAttribute, ok := attributes["catalog"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog is missing from object`)

		return NewTargetAppVersionValueUnknown(), diags
	}

	catalogVal, ok := catalogAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog expected to be basetypes.StringValue, was: %T`, catalogAttribute))
	}

	commitHashAttribute, ok := attributes["commit_hash"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`commit_hash is missing from object`)

		return NewTargetAppVersionValueUnknown(), diags
	}

	commitHashVal, ok := commitHashAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`commit_hash expected to be basetypes.StringValue, was: %T`, commitHashAttribute))
	}

	semVerAttribute, ok := attributes["sem_ver"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sem_ver is missing from object`)

		return NewTargetAppVersionValueUnknown(), diags
	}

	semVerVal, ok := semVerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sem_ver expected to be basetypes.StringValue, was: %T`, semVerAttribute))
	}

	if diags.HasError() {
		return NewTargetAppVersionValueUnknown(), diags
	}

	return TargetAppVersionValue{
		AppId:      appIdVal,
		Catalog:    catalogVal,
		CommitHash: commitHashVal,
		SemVer:     semVerVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTargetAppVersionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TargetAppVersionValue {
	object, diags := NewTargetAppVersionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTargetAppVersionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TargetAppVersionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTargetAppVersionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTargetAppVersionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTargetAppVersionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTargetAppVersionValueMust(TargetAppVersionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TargetAppVersionType) ValueType(ctx context.Context) attr.Value {
	return TargetAppVersionValue{}
}

var _ basetypes.ObjectValuable = TargetAppVersionValue{}

type TargetAppVersionValue struct {
	AppId      basetypes.StringValue `tfsdk:"app_id"`
	Catalog    basetypes.StringValue `tfsdk:"catalog"`
	CommitHash basetypes.StringValue `tfsdk:"commit_hash"`
	SemVer     basetypes.StringValue `tfsdk:"sem_ver"`
	state      attr.ValueState
}

func (v TargetAppVersionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["catalog"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["commit_hash"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sem_ver"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.Catalog.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["catalog"] = val

		val, err = v.CommitHash.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["commit_hash"] = val

		val, err = v.SemVer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sem_ver"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TargetAppVersionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TargetAppVersionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TargetAppVersionValue) String() string {
	return "TargetAppVersionValue"
}

func (v TargetAppVersionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":      v.AppId,
			"catalog":     v.Catalog,
			"commit_hash": v.CommitHash,
			"sem_ver":     v.SemVer,
		})

	return objVal, diags
}

func (v TargetAppVersionValue) Equal(o attr.Value) bool {
	other, ok := o.(TargetAppVersionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.Catalog.Equal(other.Catalog) {
		return false
	}

	if !v.CommitHash.Equal(other.CommitHash) {
		return false
	}

	if !v.SemVer.Equal(other.SemVer) {
		return false
	}

	return true
}

func (v TargetAppVersionValue) Type(ctx context.Context) attr.Type {
	return TargetAppVersionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TargetAppVersionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id":      basetypes.StringType{},
		"catalog":     basetypes.StringType{},
		"commit_hash": basetypes.StringType{},
		"sem_ver":     basetypes.StringType{},
	}
}
