// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_topologies

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TopologiesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"topologies": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"endpoints": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"attributes": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"type": schema.StringAttribute{
												Computed: true,
											},
											"ui_description": schema.StringAttribute{
												Computed: true,
											},
											"ui_description_key": schema.StringAttribute{
												Computed: true,
											},
											"ui_name": schema.StringAttribute{
												Computed: true,
											},
											"ui_name_key": schema.StringAttribute{
												Computed: true,
											},
										},
										CustomType: AttributesType{
											ObjectType: types.ObjectType{
												AttrTypes: AttributesValue{}.AttributeTypes(ctx),
											},
										},
									},
									Computed: true,
								},
								"schema": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"group": schema.StringAttribute{
											Computed: true,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
									CustomType: SchemaType{
										ObjectType: types.ObjectType{
											AttrTypes: SchemaValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"subtitle": schema.StringAttribute{
									Computed: true,
								},
								"subtitle_key": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: EndpointsType{
								ObjectType: types.ObjectType{
									AttrTypes: EndpointsValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"group": schema.StringAttribute{
							Computed: true,
						},
						"grouping": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"group": schema.StringAttribute{
									Computed: true,
								},
								"kind": schema.StringAttribute{
									Computed: true,
								},
								"version": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: GroupingType{
								ObjectType: types.ObjectType{
									AttrTypes: GroupingValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"links": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"attributes_1": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"type": schema.StringAttribute{
												Computed: true,
											},
											"ui_description": schema.StringAttribute{
												Computed: true,
											},
											"ui_description_key": schema.StringAttribute{
												Computed: true,
											},
											"ui_name": schema.StringAttribute{
												Computed: true,
											},
											"ui_name_key": schema.StringAttribute{
												Computed: true,
											},
										},
										CustomType: Attributes1Type{
											ObjectType: types.ObjectType{
												AttrTypes: Attributes1Value{}.AttributeTypes(ctx),
											},
										},
									},
									Computed: true,
								},
								"schema_1": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"group": schema.StringAttribute{
											Computed: true,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
									CustomType: Schema1Type{
										ObjectType: types.ObjectType{
											AttrTypes: Schema1Value{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"subtitle": schema.StringAttribute{
									Computed: true,
								},
								"subtitle_key": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: LinksType{
								ObjectType: types.ObjectType{
									AttrTypes: LinksValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"nodes": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"attributes_2": schema.MapNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"type": schema.StringAttribute{
												Computed: true,
											},
											"ui_description": schema.StringAttribute{
												Computed: true,
											},
											"ui_description_key": schema.StringAttribute{
												Computed: true,
											},
											"ui_name": schema.StringAttribute{
												Computed: true,
											},
											"ui_name_key": schema.StringAttribute{
												Computed: true,
											},
										},
										CustomType: Attributes2Type{
											ObjectType: types.ObjectType{
												AttrTypes: Attributes2Value{}.AttributeTypes(ctx),
											},
										},
									},
									Computed: true,
								},
								"schema_2": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"group": schema.StringAttribute{
											Computed: true,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
									CustomType: Schema2Type{
										ObjectType: types.ObjectType{
											AttrTypes: Schema2Value{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
								"subtitle": schema.StringAttribute{
									Computed: true,
								},
								"subtitle_key": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: NodesType{
								ObjectType: types.ObjectType{
									AttrTypes: NodesValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"ui_description": schema.StringAttribute{
							Computed: true,
						},
						"ui_description_key": schema.StringAttribute{
							Computed: true,
						},
						"ui_name": schema.StringAttribute{
							Computed: true,
						},
						"ui_name_key": schema.StringAttribute{
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: TopologiesType{
						ObjectType: types.ObjectType{
							AttrTypes: TopologiesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type TopologiesModel struct {
	Topologies types.Set `tfsdk:"topologies"`
}

var _ basetypes.ObjectTypable = TopologiesType{}

type TopologiesType struct {
	basetypes.ObjectType
}

func (t TopologiesType) Equal(o attr.Type) bool {
	other, ok := o.(TopologiesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TopologiesType) String() string {
	return "TopologiesType"
}

func (t TopologiesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	endpointsAttribute, ok := attributes["endpoints"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoints is missing from object`)

		return nil, diags
	}

	endpointsVal, ok := endpointsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoints expected to be basetypes.ObjectValue, was: %T`, endpointsAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	groupingAttribute, ok := attributes["grouping"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`grouping is missing from object`)

		return nil, diags
	}

	groupingVal, ok := groupingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`grouping expected to be basetypes.ObjectValue, was: %T`, groupingAttribute))
	}

	linksAttribute, ok := attributes["links"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`links is missing from object`)

		return nil, diags
	}

	linksVal, ok := linksAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`links expected to be basetypes.ObjectValue, was: %T`, linksAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return nil, diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ObjectValue, was: %T`, nodesAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return nil, diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return nil, diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return nil, diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return nil, diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TopologiesValue{
		Endpoints:        endpointsVal,
		Group:            groupVal,
		Grouping:         groupingVal,
		Links:            linksVal,
		Name:             nameVal,
		Nodes:            nodesVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		Version:          versionVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewTopologiesValueNull() TopologiesValue {
	return TopologiesValue{
		state: attr.ValueStateNull,
	}
}

func NewTopologiesValueUnknown() TopologiesValue {
	return TopologiesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTopologiesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TopologiesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TopologiesValue Attribute Value",
				"While creating a TopologiesValue value, a missing attribute value was detected. "+
					"A TopologiesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TopologiesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TopologiesValue Attribute Type",
				"While creating a TopologiesValue value, an invalid attribute value was detected. "+
					"A TopologiesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TopologiesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TopologiesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TopologiesValue Attribute Value",
				"While creating a TopologiesValue value, an extra attribute value was detected. "+
					"A TopologiesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TopologiesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTopologiesValueUnknown(), diags
	}

	endpointsAttribute, ok := attributes["endpoints"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoints is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	endpointsVal, ok := endpointsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoints expected to be basetypes.ObjectValue, was: %T`, endpointsAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	groupingAttribute, ok := attributes["grouping"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`grouping is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	groupingVal, ok := groupingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`grouping expected to be basetypes.ObjectValue, was: %T`, groupingAttribute))
	}

	linksAttribute, ok := attributes["links"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`links is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	linksVal, ok := linksAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`links expected to be basetypes.ObjectValue, was: %T`, linksAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ObjectValue, was: %T`, nodesAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewTopologiesValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewTopologiesValueUnknown(), diags
	}

	return TopologiesValue{
		Endpoints:        endpointsVal,
		Group:            groupVal,
		Grouping:         groupingVal,
		Links:            linksVal,
		Name:             nameVal,
		Nodes:            nodesVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		Version:          versionVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewTopologiesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TopologiesValue {
	object, diags := NewTopologiesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTopologiesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TopologiesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTopologiesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTopologiesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTopologiesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTopologiesValueMust(TopologiesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TopologiesType) ValueType(ctx context.Context) attr.Value {
	return TopologiesValue{}
}

var _ basetypes.ObjectValuable = TopologiesValue{}

type TopologiesValue struct {
	Endpoints        basetypes.ObjectValue `tfsdk:"endpoints"`
	Group            basetypes.StringValue `tfsdk:"group"`
	Grouping         basetypes.ObjectValue `tfsdk:"grouping"`
	Links            basetypes.ObjectValue `tfsdk:"links"`
	Name             basetypes.StringValue `tfsdk:"name"`
	Nodes            basetypes.ObjectValue `tfsdk:"nodes"`
	UiDescription    basetypes.StringValue `tfsdk:"ui_description"`
	UiDescriptionKey basetypes.StringValue `tfsdk:"ui_description_key"`
	UiName           basetypes.StringValue `tfsdk:"ui_name"`
	UiNameKey        basetypes.StringValue `tfsdk:"ui_name_key"`
	Version          basetypes.StringValue `tfsdk:"version"`
	state            attr.ValueState
}

func (v TopologiesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["endpoints"] = basetypes.ObjectType{
		AttrTypes: EndpointsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["grouping"] = basetypes.ObjectType{
		AttrTypes: GroupingValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["links"] = basetypes.ObjectType{
		AttrTypes: LinksValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nodes"] = basetypes.ObjectType{
		AttrTypes: NodesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["ui_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.Endpoints.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["endpoints"] = val

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Grouping.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["grouping"] = val

		val, err = v.Links.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["links"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Nodes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nodes"] = val

		val, err = v.UiDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description"] = val

		val, err = v.UiDescriptionKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description_key"] = val

		val, err = v.UiName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name"] = val

		val, err = v.UiNameKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name_key"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TopologiesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TopologiesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TopologiesValue) String() string {
	return "TopologiesValue"
}

func (v TopologiesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var endpoints basetypes.ObjectValue

	if v.Endpoints.IsNull() {
		endpoints = types.ObjectNull(
			EndpointsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Endpoints.IsUnknown() {
		endpoints = types.ObjectUnknown(
			EndpointsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Endpoints.IsNull() && !v.Endpoints.IsUnknown() {
		endpoints = types.ObjectValueMust(
			EndpointsValue{}.AttributeTypes(ctx),
			v.Endpoints.Attributes(),
		)
	}

	var grouping basetypes.ObjectValue

	if v.Grouping.IsNull() {
		grouping = types.ObjectNull(
			GroupingValue{}.AttributeTypes(ctx),
		)
	}

	if v.Grouping.IsUnknown() {
		grouping = types.ObjectUnknown(
			GroupingValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Grouping.IsNull() && !v.Grouping.IsUnknown() {
		grouping = types.ObjectValueMust(
			GroupingValue{}.AttributeTypes(ctx),
			v.Grouping.Attributes(),
		)
	}

	var links basetypes.ObjectValue

	if v.Links.IsNull() {
		links = types.ObjectNull(
			LinksValue{}.AttributeTypes(ctx),
		)
	}

	if v.Links.IsUnknown() {
		links = types.ObjectUnknown(
			LinksValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Links.IsNull() && !v.Links.IsUnknown() {
		links = types.ObjectValueMust(
			LinksValue{}.AttributeTypes(ctx),
			v.Links.Attributes(),
		)
	}

	var nodes basetypes.ObjectValue

	if v.Nodes.IsNull() {
		nodes = types.ObjectNull(
			NodesValue{}.AttributeTypes(ctx),
		)
	}

	if v.Nodes.IsUnknown() {
		nodes = types.ObjectUnknown(
			NodesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Nodes.IsNull() && !v.Nodes.IsUnknown() {
		nodes = types.ObjectValueMust(
			NodesValue{}.AttributeTypes(ctx),
			v.Nodes.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"endpoints": basetypes.ObjectType{
			AttrTypes: EndpointsValue{}.AttributeTypes(ctx),
		},
		"group": basetypes.StringType{},
		"grouping": basetypes.ObjectType{
			AttrTypes: GroupingValue{}.AttributeTypes(ctx),
		},
		"links": basetypes.ObjectType{
			AttrTypes: LinksValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
		"nodes": basetypes.ObjectType{
			AttrTypes: NodesValue{}.AttributeTypes(ctx),
		},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
		"version":            basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"endpoints":          endpoints,
			"group":              v.Group,
			"grouping":           grouping,
			"links":              links,
			"name":               v.Name,
			"nodes":              nodes,
			"ui_description":     v.UiDescription,
			"ui_description_key": v.UiDescriptionKey,
			"ui_name":            v.UiName,
			"ui_name_key":        v.UiNameKey,
			"version":            v.Version,
		})

	return objVal, diags
}

func (v TopologiesValue) Equal(o attr.Value) bool {
	other, ok := o.(TopologiesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Endpoints.Equal(other.Endpoints) {
		return false
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Grouping.Equal(other.Grouping) {
		return false
	}

	if !v.Links.Equal(other.Links) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Nodes.Equal(other.Nodes) {
		return false
	}

	if !v.UiDescription.Equal(other.UiDescription) {
		return false
	}

	if !v.UiDescriptionKey.Equal(other.UiDescriptionKey) {
		return false
	}

	if !v.UiName.Equal(other.UiName) {
		return false
	}

	if !v.UiNameKey.Equal(other.UiNameKey) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v TopologiesValue) Type(ctx context.Context) attr.Type {
	return TopologiesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TopologiesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"endpoints": basetypes.ObjectType{
			AttrTypes: EndpointsValue{}.AttributeTypes(ctx),
		},
		"group": basetypes.StringType{},
		"grouping": basetypes.ObjectType{
			AttrTypes: GroupingValue{}.AttributeTypes(ctx),
		},
		"links": basetypes.ObjectType{
			AttrTypes: LinksValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
		"nodes": basetypes.ObjectType{
			AttrTypes: NodesValue{}.AttributeTypes(ctx),
		},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
		"version":            basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EndpointsType{}

type EndpointsType struct {
	basetypes.ObjectType
}

func (t EndpointsType) Equal(o attr.Type) bool {
	other, ok := o.(EndpointsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EndpointsType) String() string {
	return "EndpointsType"
}

func (t EndpointsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attributesAttribute, ok := attributes["attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes is missing from object`)

		return nil, diags
	}

	attributesVal, ok := attributesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes expected to be basetypes.MapValue, was: %T`, attributesAttribute))
	}

	schemaAttribute, ok := attributes["schema"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema is missing from object`)

		return nil, diags
	}

	schemaVal, ok := schemaAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema expected to be basetypes.ObjectValue, was: %T`, schemaAttribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return nil, diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return nil, diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EndpointsValue{
		Attributes:  attributesVal,
		Schema:      schemaVal,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewEndpointsValueNull() EndpointsValue {
	return EndpointsValue{
		state: attr.ValueStateNull,
	}
}

func NewEndpointsValueUnknown() EndpointsValue {
	return EndpointsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEndpointsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EndpointsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EndpointsValue Attribute Value",
				"While creating a EndpointsValue value, a missing attribute value was detected. "+
					"A EndpointsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EndpointsValue Attribute Type",
				"While creating a EndpointsValue value, an invalid attribute value was detected. "+
					"A EndpointsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EndpointsValue Attribute Value",
				"While creating a EndpointsValue value, an extra attribute value was detected. "+
					"A EndpointsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EndpointsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEndpointsValueUnknown(), diags
	}

	attributesAttribute, ok := attributes["attributes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	attributesVal, ok := attributesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes expected to be basetypes.MapValue, was: %T`, attributesAttribute))
	}

	schemaAttribute, ok := attributes["schema"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	schemaVal, ok := schemaAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema expected to be basetypes.ObjectValue, was: %T`, schemaAttribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return NewEndpointsValueUnknown(), diags
	}

	return EndpointsValue{
		Attributes:  attributesVal,
		Schema:      schemaVal,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewEndpointsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EndpointsValue {
	object, diags := NewEndpointsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEndpointsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EndpointsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEndpointsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEndpointsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEndpointsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEndpointsValueMust(EndpointsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EndpointsType) ValueType(ctx context.Context) attr.Value {
	return EndpointsValue{}
}

var _ basetypes.ObjectValuable = EndpointsValue{}

type EndpointsValue struct {
	Attributes  basetypes.MapValue    `tfsdk:"attributes"`
	Schema      basetypes.ObjectValue `tfsdk:"schema"`
	Subtitle    basetypes.StringValue `tfsdk:"subtitle"`
	SubtitleKey basetypes.StringValue `tfsdk:"subtitle_key"`
	state       attr.ValueState
}

func (v EndpointsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["attributes"] = basetypes.MapType{
		ElemType: AttributesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["schema"] = basetypes.ObjectType{
		AttrTypes: SchemaValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["subtitle"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subtitle_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Attributes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attributes"] = val

		val, err = v.Schema.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema"] = val

		val, err = v.Subtitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle"] = val

		val, err = v.SubtitleKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EndpointsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EndpointsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EndpointsValue) String() string {
	return "EndpointsValue"
}

func (v EndpointsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := types.MapValueMust(
		AttributesType{
			basetypes.ObjectType{
				AttrTypes: AttributesValue{}.AttributeTypes(ctx),
			},
		},
		v.Attributes.Elements(),
	)

	if v.Attributes.IsNull() {
		attributes = types.MapNull(
			AttributesType{
				basetypes.ObjectType{
					AttrTypes: AttributesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Attributes.IsUnknown() {
		attributes = types.MapUnknown(
			AttributesType{
				basetypes.ObjectType{
					AttrTypes: AttributesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var schema basetypes.ObjectValue

	if v.Schema.IsNull() {
		schema = types.ObjectNull(
			SchemaValue{}.AttributeTypes(ctx),
		)
	}

	if v.Schema.IsUnknown() {
		schema = types.ObjectUnknown(
			SchemaValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Schema.IsNull() && !v.Schema.IsUnknown() {
		schema = types.ObjectValueMust(
			SchemaValue{}.AttributeTypes(ctx),
			v.Schema.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"attributes": basetypes.MapType{
			ElemType: AttributesValue{}.Type(ctx),
		},
		"schema": basetypes.ObjectType{
			AttrTypes: SchemaValue{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"attributes":   attributes,
			"schema":       schema,
			"subtitle":     v.Subtitle,
			"subtitle_key": v.SubtitleKey,
		})

	return objVal, diags
}

func (v EndpointsValue) Equal(o attr.Value) bool {
	other, ok := o.(EndpointsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attributes.Equal(other.Attributes) {
		return false
	}

	if !v.Schema.Equal(other.Schema) {
		return false
	}

	if !v.Subtitle.Equal(other.Subtitle) {
		return false
	}

	if !v.SubtitleKey.Equal(other.SubtitleKey) {
		return false
	}

	return true
}

func (v EndpointsValue) Type(ctx context.Context) attr.Type {
	return EndpointsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EndpointsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attributes": basetypes.MapType{
			ElemType: AttributesValue{}.Type(ctx),
		},
		"schema": basetypes.ObjectType{
			AttrTypes: SchemaValue{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AttributesType{}

type AttributesType struct {
	basetypes.ObjectType
}

func (t AttributesType) Equal(o attr.Type) bool {
	other, ok := o.(AttributesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AttributesType) String() string {
	return "AttributesType"
}

func (t AttributesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return nil, diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return nil, diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return nil, diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return nil, diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AttributesValue{
		AttributesType:   typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributesValueNull() AttributesValue {
	return AttributesValue{
		state: attr.ValueStateNull,
	}
}

func NewAttributesValueUnknown() AttributesValue {
	return AttributesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAttributesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AttributesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AttributesValue Attribute Value",
				"While creating a AttributesValue value, a missing attribute value was detected. "+
					"A AttributesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AttributesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AttributesValue Attribute Type",
				"While creating a AttributesValue value, an invalid attribute value was detected. "+
					"A AttributesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AttributesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AttributesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AttributesValue Attribute Value",
				"While creating a AttributesValue value, an extra attribute value was detected. "+
					"A AttributesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AttributesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttributesValueUnknown(), diags
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewAttributesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return NewAttributesValueUnknown(), diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return NewAttributesValueUnknown(), diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return NewAttributesValueUnknown(), diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return NewAttributesValueUnknown(), diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return NewAttributesValueUnknown(), diags
	}

	return AttributesValue{
		AttributesType:   typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AttributesValue {
	object, diags := NewAttributesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttributesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AttributesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttributesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttributesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttributesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttributesValueMust(AttributesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AttributesType) ValueType(ctx context.Context) attr.Value {
	return AttributesValue{}
}

var _ basetypes.ObjectValuable = AttributesValue{}

type AttributesValue struct {
	AttributesType   basetypes.StringValue `tfsdk:"type"`
	UiDescription    basetypes.StringValue `tfsdk:"ui_description"`
	UiDescriptionKey basetypes.StringValue `tfsdk:"ui_description_key"`
	UiName           basetypes.StringValue `tfsdk:"ui_name"`
	UiNameKey        basetypes.StringValue `tfsdk:"ui_name_key"`
	state            attr.ValueState
}

func (v AttributesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AttributesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UiDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description"] = val

		val, err = v.UiDescriptionKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description_key"] = val

		val, err = v.UiName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name"] = val

		val, err = v.UiNameKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AttributesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AttributesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AttributesValue) String() string {
	return "AttributesValue"
}

func (v AttributesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"type":               v.AttributesType,
			"ui_description":     v.UiDescription,
			"ui_description_key": v.UiDescriptionKey,
			"ui_name":            v.UiName,
			"ui_name_key":        v.UiNameKey,
		})

	return objVal, diags
}

func (v AttributesValue) Equal(o attr.Value) bool {
	other, ok := o.(AttributesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AttributesType.Equal(other.AttributesType) {
		return false
	}

	if !v.UiDescription.Equal(other.UiDescription) {
		return false
	}

	if !v.UiDescriptionKey.Equal(other.UiDescriptionKey) {
		return false
	}

	if !v.UiName.Equal(other.UiName) {
		return false
	}

	if !v.UiNameKey.Equal(other.UiNameKey) {
		return false
	}

	return true
}

func (v AttributesValue) Type(ctx context.Context) attr.Type {
	return AttributesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AttributesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SchemaType{}

type SchemaType struct {
	basetypes.ObjectType
}

func (t SchemaType) Equal(o attr.Type) bool {
	other, ok := o.(SchemaType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchemaType) String() string {
	return "SchemaType"
}

func (t SchemaType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SchemaValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchemaValueNull() SchemaValue {
	return SchemaValue{
		state: attr.ValueStateNull,
	}
}

func NewSchemaValueUnknown() SchemaValue {
	return SchemaValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchemaValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchemaValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchemaValue Attribute Value",
				"While creating a SchemaValue value, a missing attribute value was detected. "+
					"A SchemaValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchemaValue Attribute Type",
				"While creating a SchemaValue value, an invalid attribute value was detected. "+
					"A SchemaValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchemaValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchemaValue Attribute Value",
				"While creating a SchemaValue value, an extra attribute value was detected. "+
					"A SchemaValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchemaValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchemaValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewSchemaValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewSchemaValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewSchemaValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewSchemaValueUnknown(), diags
	}

	return SchemaValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchemaValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchemaValue {
	object, diags := NewSchemaValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchemaValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchemaType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchemaValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchemaValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchemaValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchemaValueMust(SchemaValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchemaType) ValueType(ctx context.Context) attr.Value {
	return SchemaValue{}
}

var _ basetypes.ObjectValuable = SchemaValue{}

type SchemaValue struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v SchemaValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchemaValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchemaValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchemaValue) String() string {
	return "SchemaValue"
}

func (v SchemaValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v SchemaValue) Equal(o attr.Value) bool {
	other, ok := o.(SchemaValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v SchemaValue) Type(ctx context.Context) attr.Type {
	return SchemaType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchemaValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GroupingType{}

type GroupingType struct {
	basetypes.ObjectType
}

func (t GroupingType) Equal(o attr.Type) bool {
	other, ok := o.(GroupingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GroupingType) String() string {
	return "GroupingType"
}

func (t GroupingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GroupingValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGroupingValueNull() GroupingValue {
	return GroupingValue{
		state: attr.ValueStateNull,
	}
}

func NewGroupingValueUnknown() GroupingValue {
	return GroupingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGroupingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GroupingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GroupingValue Attribute Value",
				"While creating a GroupingValue value, a missing attribute value was detected. "+
					"A GroupingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GroupingValue Attribute Type",
				"While creating a GroupingValue value, an invalid attribute value was detected. "+
					"A GroupingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GroupingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GroupingValue Attribute Value",
				"While creating a GroupingValue value, an extra attribute value was detected. "+
					"A GroupingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GroupingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGroupingValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewGroupingValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewGroupingValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewGroupingValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewGroupingValueUnknown(), diags
	}

	return GroupingValue{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewGroupingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GroupingValue {
	object, diags := NewGroupingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGroupingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GroupingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGroupingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGroupingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGroupingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGroupingValueMust(GroupingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GroupingType) ValueType(ctx context.Context) attr.Value {
	return GroupingValue{}
}

var _ basetypes.ObjectValuable = GroupingValue{}

type GroupingValue struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v GroupingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GroupingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GroupingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GroupingValue) String() string {
	return "GroupingValue"
}

func (v GroupingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v GroupingValue) Equal(o attr.Value) bool {
	other, ok := o.(GroupingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v GroupingValue) Type(ctx context.Context) attr.Type {
	return GroupingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GroupingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinksType{}

type LinksType struct {
	basetypes.ObjectType
}

func (t LinksType) Equal(o attr.Type) bool {
	other, ok := o.(LinksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinksType) String() string {
	return "LinksType"
}

func (t LinksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attributes1Attribute, ok := attributes["attributes_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes_1 is missing from object`)

		return nil, diags
	}

	attributes1Val, ok := attributes1Attribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes_1 expected to be basetypes.MapValue, was: %T`, attributes1Attribute))
	}

	schema1Attribute, ok := attributes["schema_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_1 is missing from object`)

		return nil, diags
	}

	schema1Val, ok := schema1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_1 expected to be basetypes.ObjectValue, was: %T`, schema1Attribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return nil, diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return nil, diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinksValue{
		Attributes1: attributes1Val,
		Schema1:     schema1Val,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewLinksValueNull() LinksValue {
	return LinksValue{
		state: attr.ValueStateNull,
	}
}

func NewLinksValueUnknown() LinksValue {
	return LinksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinksValue Attribute Value",
				"While creating a LinksValue value, a missing attribute value was detected. "+
					"A LinksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinksValue Attribute Type",
				"While creating a LinksValue value, an invalid attribute value was detected. "+
					"A LinksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinksValue Attribute Value",
				"While creating a LinksValue value, an extra attribute value was detected. "+
					"A LinksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinksValueUnknown(), diags
	}

	attributes1Attribute, ok := attributes["attributes_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes_1 is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	attributes1Val, ok := attributes1Attribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes_1 expected to be basetypes.MapValue, was: %T`, attributes1Attribute))
	}

	schema1Attribute, ok := attributes["schema_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_1 is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	schema1Val, ok := schema1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_1 expected to be basetypes.ObjectValue, was: %T`, schema1Attribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return NewLinksValueUnknown(), diags
	}

	return LinksValue{
		Attributes1: attributes1Val,
		Schema1:     schema1Val,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewLinksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinksValue {
	object, diags := NewLinksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinksValueMust(LinksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinksType) ValueType(ctx context.Context) attr.Value {
	return LinksValue{}
}

var _ basetypes.ObjectValuable = LinksValue{}

type LinksValue struct {
	Attributes1 basetypes.MapValue    `tfsdk:"attributes_1"`
	Schema1     basetypes.ObjectValue `tfsdk:"schema_1"`
	Subtitle    basetypes.StringValue `tfsdk:"subtitle"`
	SubtitleKey basetypes.StringValue `tfsdk:"subtitle_key"`
	state       attr.ValueState
}

func (v LinksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["attributes_1"] = basetypes.MapType{
		ElemType: Attributes1Value{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["schema_1"] = basetypes.ObjectType{
		AttrTypes: Schema1Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["subtitle"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subtitle_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Attributes1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attributes_1"] = val

		val, err = v.Schema1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_1"] = val

		val, err = v.Subtitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle"] = val

		val, err = v.SubtitleKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinksValue) String() string {
	return "LinksValue"
}

func (v LinksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes1 := types.MapValueMust(
		Attributes1Type{
			basetypes.ObjectType{
				AttrTypes: Attributes1Value{}.AttributeTypes(ctx),
			},
		},
		v.Attributes1.Elements(),
	)

	if v.Attributes1.IsNull() {
		attributes1 = types.MapNull(
			Attributes1Type{
				basetypes.ObjectType{
					AttrTypes: Attributes1Value{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Attributes1.IsUnknown() {
		attributes1 = types.MapUnknown(
			Attributes1Type{
				basetypes.ObjectType{
					AttrTypes: Attributes1Value{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var schema1 basetypes.ObjectValue

	if v.Schema1.IsNull() {
		schema1 = types.ObjectNull(
			Schema1Value{}.AttributeTypes(ctx),
		)
	}

	if v.Schema1.IsUnknown() {
		schema1 = types.ObjectUnknown(
			Schema1Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Schema1.IsNull() && !v.Schema1.IsUnknown() {
		schema1 = types.ObjectValueMust(
			Schema1Value{}.AttributeTypes(ctx),
			v.Schema1.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"attributes_1": basetypes.MapType{
			ElemType: Attributes1Value{}.Type(ctx),
		},
		"schema_1": basetypes.ObjectType{
			AttrTypes: Schema1Value{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"attributes_1": attributes1,
			"schema_1":     schema1,
			"subtitle":     v.Subtitle,
			"subtitle_key": v.SubtitleKey,
		})

	return objVal, diags
}

func (v LinksValue) Equal(o attr.Value) bool {
	other, ok := o.(LinksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attributes1.Equal(other.Attributes1) {
		return false
	}

	if !v.Schema1.Equal(other.Schema1) {
		return false
	}

	if !v.Subtitle.Equal(other.Subtitle) {
		return false
	}

	if !v.SubtitleKey.Equal(other.SubtitleKey) {
		return false
	}

	return true
}

func (v LinksValue) Type(ctx context.Context) attr.Type {
	return LinksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attributes_1": basetypes.MapType{
			ElemType: Attributes1Value{}.Type(ctx),
		},
		"schema_1": basetypes.ObjectType{
			AttrTypes: Schema1Value{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = Attributes1Type{}

type Attributes1Type struct {
	basetypes.ObjectType
}

func (t Attributes1Type) Equal(o attr.Type) bool {
	other, ok := o.(Attributes1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Attributes1Type) String() string {
	return "Attributes1Type"
}

func (t Attributes1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return nil, diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return nil, diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return nil, diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return nil, diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Attributes1Value{
		Attributes1Type:  typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributes1ValueNull() Attributes1Value {
	return Attributes1Value{
		state: attr.ValueStateNull,
	}
}

func NewAttributes1ValueUnknown() Attributes1Value {
	return Attributes1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewAttributes1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Attributes1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Attributes1Value Attribute Value",
				"While creating a Attributes1Value value, a missing attribute value was detected. "+
					"A Attributes1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attributes1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Attributes1Value Attribute Type",
				"While creating a Attributes1Value value, an invalid attribute value was detected. "+
					"A Attributes1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attributes1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Attributes1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Attributes1Value Attribute Value",
				"While creating a Attributes1Value value, an extra attribute value was detected. "+
					"A Attributes1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Attributes1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttributes1ValueUnknown(), diags
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewAttributes1ValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return NewAttributes1ValueUnknown(), diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return NewAttributes1ValueUnknown(), diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return NewAttributes1ValueUnknown(), diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return NewAttributes1ValueUnknown(), diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return NewAttributes1ValueUnknown(), diags
	}

	return Attributes1Value{
		Attributes1Type:  typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributes1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Attributes1Value {
	object, diags := NewAttributes1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttributes1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Attributes1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttributes1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttributes1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttributes1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttributes1ValueMust(Attributes1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Attributes1Type) ValueType(ctx context.Context) attr.Value {
	return Attributes1Value{}
}

var _ basetypes.ObjectValuable = Attributes1Value{}

type Attributes1Value struct {
	Attributes1Type  basetypes.StringValue `tfsdk:"type"`
	UiDescription    basetypes.StringValue `tfsdk:"ui_description"`
	UiDescriptionKey basetypes.StringValue `tfsdk:"ui_description_key"`
	UiName           basetypes.StringValue `tfsdk:"ui_name"`
	UiNameKey        basetypes.StringValue `tfsdk:"ui_name_key"`
	state            attr.ValueState
}

func (v Attributes1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Attributes1Type.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UiDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description"] = val

		val, err = v.UiDescriptionKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description_key"] = val

		val, err = v.UiName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name"] = val

		val, err = v.UiNameKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Attributes1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Attributes1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Attributes1Value) String() string {
	return "Attributes1Value"
}

func (v Attributes1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"type":               v.Attributes1Type,
			"ui_description":     v.UiDescription,
			"ui_description_key": v.UiDescriptionKey,
			"ui_name":            v.UiName,
			"ui_name_key":        v.UiNameKey,
		})

	return objVal, diags
}

func (v Attributes1Value) Equal(o attr.Value) bool {
	other, ok := o.(Attributes1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attributes1Type.Equal(other.Attributes1Type) {
		return false
	}

	if !v.UiDescription.Equal(other.UiDescription) {
		return false
	}

	if !v.UiDescriptionKey.Equal(other.UiDescriptionKey) {
		return false
	}

	if !v.UiName.Equal(other.UiName) {
		return false
	}

	if !v.UiNameKey.Equal(other.UiNameKey) {
		return false
	}

	return true
}

func (v Attributes1Value) Type(ctx context.Context) attr.Type {
	return Attributes1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Attributes1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = Schema1Type{}

type Schema1Type struct {
	basetypes.ObjectType
}

func (t Schema1Type) Equal(o attr.Type) bool {
	other, ok := o.(Schema1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Schema1Type) String() string {
	return "Schema1Type"
}

func (t Schema1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Schema1Value{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchema1ValueNull() Schema1Value {
	return Schema1Value{
		state: attr.ValueStateNull,
	}
}

func NewSchema1ValueUnknown() Schema1Value {
	return Schema1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewSchema1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Schema1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Schema1Value Attribute Value",
				"While creating a Schema1Value value, a missing attribute value was detected. "+
					"A Schema1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Schema1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Schema1Value Attribute Type",
				"While creating a Schema1Value value, an invalid attribute value was detected. "+
					"A Schema1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Schema1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Schema1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Schema1Value Attribute Value",
				"While creating a Schema1Value value, an extra attribute value was detected. "+
					"A Schema1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Schema1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchema1ValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewSchema1ValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewSchema1ValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewSchema1ValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewSchema1ValueUnknown(), diags
	}

	return Schema1Value{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchema1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Schema1Value {
	object, diags := NewSchema1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchema1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Schema1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchema1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchema1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchema1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchema1ValueMust(Schema1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Schema1Type) ValueType(ctx context.Context) attr.Value {
	return Schema1Value{}
}

var _ basetypes.ObjectValuable = Schema1Value{}

type Schema1Value struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v Schema1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Schema1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Schema1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Schema1Value) String() string {
	return "Schema1Value"
}

func (v Schema1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v Schema1Value) Equal(o attr.Value) bool {
	other, ok := o.(Schema1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v Schema1Value) Type(ctx context.Context) attr.Type {
	return Schema1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Schema1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NodesType{}

type NodesType struct {
	basetypes.ObjectType
}

func (t NodesType) Equal(o attr.Type) bool {
	other, ok := o.(NodesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodesType) String() string {
	return "NodesType"
}

func (t NodesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attributes2Attribute, ok := attributes["attributes_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes_2 is missing from object`)

		return nil, diags
	}

	attributes2Val, ok := attributes2Attribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes_2 expected to be basetypes.MapValue, was: %T`, attributes2Attribute))
	}

	schema2Attribute, ok := attributes["schema_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_2 is missing from object`)

		return nil, diags
	}

	schema2Val, ok := schema2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_2 expected to be basetypes.ObjectValue, was: %T`, schema2Attribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return nil, diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return nil, diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodesValue{
		Attributes2: attributes2Val,
		Schema2:     schema2Val,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewNodesValueNull() NodesValue {
	return NodesValue{
		state: attr.ValueStateNull,
	}
}

func NewNodesValueUnknown() NodesValue {
	return NodesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodesValue Attribute Value",
				"While creating a NodesValue value, a missing attribute value was detected. "+
					"A NodesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodesValue Attribute Type",
				"While creating a NodesValue value, an invalid attribute value was detected. "+
					"A NodesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodesValue Attribute Value",
				"While creating a NodesValue value, an extra attribute value was detected. "+
					"A NodesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodesValueUnknown(), diags
	}

	attributes2Attribute, ok := attributes["attributes_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attributes_2 is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	attributes2Val, ok := attributes2Attribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attributes_2 expected to be basetypes.MapValue, was: %T`, attributes2Attribute))
	}

	schema2Attribute, ok := attributes["schema_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_2 is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	schema2Val, ok := schema2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_2 expected to be basetypes.ObjectValue, was: %T`, schema2Attribute))
	}

	subtitleAttribute, ok := attributes["subtitle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	subtitleVal, ok := subtitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle expected to be basetypes.StringValue, was: %T`, subtitleAttribute))
	}

	subtitleKeyAttribute, ok := attributes["subtitle_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtitle_key is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	subtitleKeyVal, ok := subtitleKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtitle_key expected to be basetypes.StringValue, was: %T`, subtitleKeyAttribute))
	}

	if diags.HasError() {
		return NewNodesValueUnknown(), diags
	}

	return NodesValue{
		Attributes2: attributes2Val,
		Schema2:     schema2Val,
		Subtitle:    subtitleVal,
		SubtitleKey: subtitleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewNodesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodesValue {
	object, diags := NewNodesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodesValueMust(NodesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodesType) ValueType(ctx context.Context) attr.Value {
	return NodesValue{}
}

var _ basetypes.ObjectValuable = NodesValue{}

type NodesValue struct {
	Attributes2 basetypes.MapValue    `tfsdk:"attributes_2"`
	Schema2     basetypes.ObjectValue `tfsdk:"schema_2"`
	Subtitle    basetypes.StringValue `tfsdk:"subtitle"`
	SubtitleKey basetypes.StringValue `tfsdk:"subtitle_key"`
	state       attr.ValueState
}

func (v NodesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["attributes_2"] = basetypes.MapType{
		ElemType: Attributes2Value{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["schema_2"] = basetypes.ObjectType{
		AttrTypes: Schema2Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["subtitle"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subtitle_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Attributes2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attributes_2"] = val

		val, err = v.Schema2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_2"] = val

		val, err = v.Subtitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle"] = val

		val, err = v.SubtitleKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtitle_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodesValue) String() string {
	return "NodesValue"
}

func (v NodesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes2 := types.MapValueMust(
		Attributes2Type{
			basetypes.ObjectType{
				AttrTypes: Attributes2Value{}.AttributeTypes(ctx),
			},
		},
		v.Attributes2.Elements(),
	)

	if v.Attributes2.IsNull() {
		attributes2 = types.MapNull(
			Attributes2Type{
				basetypes.ObjectType{
					AttrTypes: Attributes2Value{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Attributes2.IsUnknown() {
		attributes2 = types.MapUnknown(
			Attributes2Type{
				basetypes.ObjectType{
					AttrTypes: Attributes2Value{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var schema2 basetypes.ObjectValue

	if v.Schema2.IsNull() {
		schema2 = types.ObjectNull(
			Schema2Value{}.AttributeTypes(ctx),
		)
	}

	if v.Schema2.IsUnknown() {
		schema2 = types.ObjectUnknown(
			Schema2Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Schema2.IsNull() && !v.Schema2.IsUnknown() {
		schema2 = types.ObjectValueMust(
			Schema2Value{}.AttributeTypes(ctx),
			v.Schema2.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"attributes_2": basetypes.MapType{
			ElemType: Attributes2Value{}.Type(ctx),
		},
		"schema_2": basetypes.ObjectType{
			AttrTypes: Schema2Value{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"attributes_2": attributes2,
			"schema_2":     schema2,
			"subtitle":     v.Subtitle,
			"subtitle_key": v.SubtitleKey,
		})

	return objVal, diags
}

func (v NodesValue) Equal(o attr.Value) bool {
	other, ok := o.(NodesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attributes2.Equal(other.Attributes2) {
		return false
	}

	if !v.Schema2.Equal(other.Schema2) {
		return false
	}

	if !v.Subtitle.Equal(other.Subtitle) {
		return false
	}

	if !v.SubtitleKey.Equal(other.SubtitleKey) {
		return false
	}

	return true
}

func (v NodesValue) Type(ctx context.Context) attr.Type {
	return NodesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attributes_2": basetypes.MapType{
			ElemType: Attributes2Value{}.Type(ctx),
		},
		"schema_2": basetypes.ObjectType{
			AttrTypes: Schema2Value{}.AttributeTypes(ctx),
		},
		"subtitle":     basetypes.StringType{},
		"subtitle_key": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = Attributes2Type{}

type Attributes2Type struct {
	basetypes.ObjectType
}

func (t Attributes2Type) Equal(o attr.Type) bool {
	other, ok := o.(Attributes2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Attributes2Type) String() string {
	return "Attributes2Type"
}

func (t Attributes2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return nil, diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return nil, diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return nil, diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return nil, diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Attributes2Value{
		Attributes2Type:  typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributes2ValueNull() Attributes2Value {
	return Attributes2Value{
		state: attr.ValueStateNull,
	}
}

func NewAttributes2ValueUnknown() Attributes2Value {
	return Attributes2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewAttributes2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Attributes2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Attributes2Value Attribute Value",
				"While creating a Attributes2Value value, a missing attribute value was detected. "+
					"A Attributes2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attributes2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Attributes2Value Attribute Type",
				"While creating a Attributes2Value value, an invalid attribute value was detected. "+
					"A Attributes2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attributes2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Attributes2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Attributes2Value Attribute Value",
				"While creating a Attributes2Value value, an extra attribute value was detected. "+
					"A Attributes2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Attributes2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttributes2ValueUnknown(), diags
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewAttributes2ValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uiDescriptionAttribute, ok := attributes["ui_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description is missing from object`)

		return NewAttributes2ValueUnknown(), diags
	}

	uiDescriptionVal, ok := uiDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description expected to be basetypes.StringValue, was: %T`, uiDescriptionAttribute))
	}

	uiDescriptionKeyAttribute, ok := attributes["ui_description_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_description_key is missing from object`)

		return NewAttributes2ValueUnknown(), diags
	}

	uiDescriptionKeyVal, ok := uiDescriptionKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_description_key expected to be basetypes.StringValue, was: %T`, uiDescriptionKeyAttribute))
	}

	uiNameAttribute, ok := attributes["ui_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name is missing from object`)

		return NewAttributes2ValueUnknown(), diags
	}

	uiNameVal, ok := uiNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name expected to be basetypes.StringValue, was: %T`, uiNameAttribute))
	}

	uiNameKeyAttribute, ok := attributes["ui_name_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ui_name_key is missing from object`)

		return NewAttributes2ValueUnknown(), diags
	}

	uiNameKeyVal, ok := uiNameKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ui_name_key expected to be basetypes.StringValue, was: %T`, uiNameKeyAttribute))
	}

	if diags.HasError() {
		return NewAttributes2ValueUnknown(), diags
	}

	return Attributes2Value{
		Attributes2Type:  typeVal,
		UiDescription:    uiDescriptionVal,
		UiDescriptionKey: uiDescriptionKeyVal,
		UiName:           uiNameVal,
		UiNameKey:        uiNameKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAttributes2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Attributes2Value {
	object, diags := NewAttributes2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttributes2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Attributes2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttributes2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttributes2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttributes2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttributes2ValueMust(Attributes2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Attributes2Type) ValueType(ctx context.Context) attr.Value {
	return Attributes2Value{}
}

var _ basetypes.ObjectValuable = Attributes2Value{}

type Attributes2Value struct {
	Attributes2Type  basetypes.StringValue `tfsdk:"type"`
	UiDescription    basetypes.StringValue `tfsdk:"ui_description"`
	UiDescriptionKey basetypes.StringValue `tfsdk:"ui_description_key"`
	UiName           basetypes.StringValue `tfsdk:"ui_name"`
	UiNameKey        basetypes.StringValue `tfsdk:"ui_name_key"`
	state            attr.ValueState
}

func (v Attributes2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_description_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ui_name_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Attributes2Type.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UiDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description"] = val

		val, err = v.UiDescriptionKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_description_key"] = val

		val, err = v.UiName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name"] = val

		val, err = v.UiNameKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ui_name_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Attributes2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Attributes2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Attributes2Value) String() string {
	return "Attributes2Value"
}

func (v Attributes2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"type":               v.Attributes2Type,
			"ui_description":     v.UiDescription,
			"ui_description_key": v.UiDescriptionKey,
			"ui_name":            v.UiName,
			"ui_name_key":        v.UiNameKey,
		})

	return objVal, diags
}

func (v Attributes2Value) Equal(o attr.Value) bool {
	other, ok := o.(Attributes2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attributes2Type.Equal(other.Attributes2Type) {
		return false
	}

	if !v.UiDescription.Equal(other.UiDescription) {
		return false
	}

	if !v.UiDescriptionKey.Equal(other.UiDescriptionKey) {
		return false
	}

	if !v.UiName.Equal(other.UiName) {
		return false
	}

	if !v.UiNameKey.Equal(other.UiNameKey) {
		return false
	}

	return true
}

func (v Attributes2Value) Type(ctx context.Context) attr.Type {
	return Attributes2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Attributes2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"type":               basetypes.StringType{},
		"ui_description":     basetypes.StringType{},
		"ui_description_key": basetypes.StringType{},
		"ui_name":            basetypes.StringType{},
		"ui_name_key":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = Schema2Type{}

type Schema2Type struct {
	basetypes.ObjectType
}

func (t Schema2Type) Equal(o attr.Type) bool {
	other, ok := o.(Schema2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Schema2Type) String() string {
	return "Schema2Type"
}

func (t Schema2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Schema2Value{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchema2ValueNull() Schema2Value {
	return Schema2Value{
		state: attr.ValueStateNull,
	}
}

func NewSchema2ValueUnknown() Schema2Value {
	return Schema2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewSchema2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Schema2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Schema2Value Attribute Value",
				"While creating a Schema2Value value, a missing attribute value was detected. "+
					"A Schema2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Schema2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Schema2Value Attribute Type",
				"While creating a Schema2Value value, an invalid attribute value was detected. "+
					"A Schema2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Schema2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Schema2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Schema2Value Attribute Value",
				"While creating a Schema2Value value, an extra attribute value was detected. "+
					"A Schema2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Schema2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchema2ValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewSchema2ValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewSchema2ValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewSchema2ValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewSchema2ValueUnknown(), diags
	}

	return Schema2Value{
		Group:   groupVal,
		Kind:    kindVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSchema2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Schema2Value {
	object, diags := NewSchema2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchema2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Schema2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchema2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchema2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchema2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchema2ValueMust(Schema2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Schema2Type) ValueType(ctx context.Context) attr.Value {
	return Schema2Value{}
}

var _ basetypes.ObjectValuable = Schema2Value{}

type Schema2Value struct {
	Group   basetypes.StringValue `tfsdk:"group"`
	Kind    basetypes.StringValue `tfsdk:"kind"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v Schema2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Schema2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Schema2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Schema2Value) String() string {
	return "Schema2Value"
}

func (v Schema2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":   v.Group,
			"kind":    v.Kind,
			"version": v.Version,
		})

	return objVal, diags
}

func (v Schema2Value) Equal(o attr.Value) bool {
	other, ok := o.(Schema2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v Schema2Value) Type(ctx context.Context) attr.Type {
	return Schema2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Schema2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":   basetypes.StringType{},
		"kind":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}
